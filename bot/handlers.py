# /home/telegram_gemini_bot/bot/handlers.py

import asyncio
import os
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ParseMode ---
from aiogram.enums import ParseMode
from aiogram.types import Message, CallbackQuery, FSInputFile, InputFile, User, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from loguru import logger
from typing import Optional, Dict, Tuple, Union
from pathlib import Path
import re # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç re –¥–ª—è fallback –≤ help

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
from config import settings
from services import (
    gemini,
    weather,
    speech,
    image_analyzer,
    file_handler,
    database,
    tts,
    translator, # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ Gemini –ø–æ–ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–≤–µ—Å—Ç–∏
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä—ã
from utils.helpers import (
    get_temp_filepath,
    cleanup_temp_file,
    escape_markdown_v2,
    is_ocr_potentially_useful,
    format_response_html, # <<< –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢ –§–û–†–ú–ê–¢–¢–ï–†–ê >>>
    escape_html # <<< –î–û–ë–ê–í–õ–ï–ù –ò–ú–ü–û–†–¢ HTML –≠–°–ö–ï–ô–ü–ï–†–ê >>>
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from .keyboards import get_mood_keyboard

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def get_user_id(message: Optional[Message] = None, callback_query: Optional[CallbackQuery] = None) -> Optional[int]:
    user: Optional[User] = None
    if message and message.from_user: user = message.from_user
    elif callback_query and callback_query.from_user: user = callback_query.from_user
    if user: return user.id
    logger.warning("Could not extract user_id from event.")
    return None

def is_admin(user_id: int) -> bool:
    auth_list = getattr(settings, 'AUTHORIZED_USERS', [])
    if not isinstance(auth_list, (list, tuple)): return False
    return user_id in auth_list

# --- Command Handlers ---

@router.message(Command("start", "help"))
async def handle_start(message: Message):
    user_id = get_user_id(message=message)
    if not user_id: return
    user_name = message.from_user.full_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await database.get_user_settings(user_id)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º HTML –¥–ª—è –±–æ–ª—å—à–µ–π –≥–∏–±–∫–æ—Å—Ç–∏ –∏ –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å MarkdownV2
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, <b>{escape_html(user_name)}</b>!\n\n"
        "–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üß† <b>–û–±—â–µ–Ω–∏–µ:</b> –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é Google Gemini. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—Å–∞–≤ <code>–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥></code>.\n"
        "üó£Ô∏è <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b> –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É.\n"
        "üñºÔ∏è <b>–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:</b> –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —è –æ–ø–∏—à—É –µ—ë —Å –ø–æ–º–æ—â—å—é Gemini Vision. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –∏ —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ (OCR), —Å–ø—Ä–æ—Å–∏ –æ–± —ç—Ç–æ–º –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.\n"
        "üìÑ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:</b> –û—Ç–ø—Ä–∞–≤—å .txt, .pdf, .csv, .xlsx –∏–ª–∏ .docx, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞.\n"
        "‚òÄÔ∏è <b>–ü–æ–≥–æ–¥–∞ (–∫–æ–º–∞–Ω–¥–∞):</b> <code>/weather <–≥–æ—Ä–æ–¥></code> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞).\n"
        "üé≠ <b>–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:</b> /mood - –≤—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ., —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π).\n"
        "üåê <b>–ü–µ—Ä–µ–≤–æ–¥ –∏ –û–∑–≤—É—á–∫–∞:</b>\n"
        "   - –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è <b>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b> —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä., <code>–ø–µ—Ä–µ–≤–µ–¥–∏ 'hello' –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π</code>).\n"
        "   - –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è <b>–æ–∑–≤—É—á–∏—Ç—å</b> —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä., <code>–æ–∑–≤—É—á—å '–ø—Ä–∏–≤–µ—Ç –º–∏—Ä'</code> –∏–ª–∏ <code>—Å–∫–∞–∂–∏ '—è –±–æ—Ç'</code>).\n"
        "   - <code>/toggle_speak</code> - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–∑–≤—É—á–∫—É –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
        f"–¢–≤–æ–π ID: <code>{user_id}</code>\n"
        "<i>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.</i>"
    )
    if is_admin(user_id):
        help_text += "\n\n<b>–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:</b>\n<code>/admin</code> <code>/status</code> <code>/restart</code>"

    try:
        await message.answer(help_text, parse_mode=ParseMode.HTML)
    except TelegramBadRequest as e:
        logger.error(f"Failed to send help message with HTML: {e}")
        help_text_plain = re.sub('<[^<]+?>', '', help_text) # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏ –¥–ª—è fallback
        try:
            await message.answer(help_text_plain, parse_mode=None)
            logger.info("Sent help message without HTML as fallback.")
        except Exception as fallback_e:
            logger.error(f"Failed to send plain help message: {fallback_e}")

@router.message(Command("weather"))
async def handle_weather(message: Message, command: CommandObject, bot: Bot):
    user_id = get_user_id(message=message)
    if not user_id: return
    city_input = command.args if command.args else "Moscow"
    logger.info(f"User {user_id} requested weather for '{city_input}' using /weather command")
    processing_msg = await message.reply(f"<i>–£–∑–Ω–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è '{escape_html(city_input)}'...</i>", parse_mode=ParseMode.HTML)

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ weather.get_weather –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MarkdownV2 –∏–ª–∏ —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
    weather_report_markdown = await weather.get_weather(city_input)

    if weather_report_markdown:
        is_error_report = any(keyword.lower() in weather_report_markdown.lower() for keyword in ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "–æ—à–∏–±–∫–∞", "—Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ç–∞–π–º–∞—É—Ç", "invalid", "not found"])
        final_parse_mode = ParseMode.MARKDOWN_V2 if not is_error_report else None

        try:
            await bot.edit_message_text(weather_report_markdown, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=final_parse_mode, disable_web_page_preview=True)
        except TelegramBadRequest as e:
             if "message is not modified" in str(e): logger.debug(f"Weather report for {city_input} was not modified.")
             elif "can't parse entities" in str(e).lower() and final_parse_mode == ParseMode.MARKDOWN_V2:
                 logger.error(f"Error editing weather message with MarkdownV2: {e}. Retrying without parse mode.")
                 plain_text_report = re.sub(r'[\\`*_\[\]()~>#+\-=|{}.!]', '', weather_report_markdown)
                 await bot.edit_message_text(plain_text_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None, disable_web_page_preview=True)
             else:
                 logger.error(f"Unhandled TelegramBadRequest editing weather message: {e}")
                 await message.reply(weather_report_markdown, parse_mode=None, disable_web_page_preview=True) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                 try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                 except Exception: pass
        except Exception as e:
             logger.error(f"Unexpected error sending/editing weather message: {e}")
             await message.reply(weather_report_markdown, parse_mode=None, disable_web_page_preview=True)
             try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
             except Exception: pass
    else:
        await bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)


@router.message(Command("mood"))
async def handle_mood(message: Message):
    user_id = get_user_id(message=message)
    if not user_id: return
    settings_data = await database.get_user_settings(user_id)
    current_mood = settings_data.get('mood', settings.DEFAULT_MOOD)
    await message.answer(f"–í—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è. –¢–µ–∫—É—â–∏–π: <code>{escape_html(current_mood)}</code>",
                         reply_markup=get_mood_keyboard(),
                         parse_mode=ParseMode.HTML)

@router.message(Command("toggle_speak"))
async def handle_toggle_speak(message: Message):
    user_id = get_user_id(message=message)
    if not user_id: return
    new_state = await database.toggle_speak_mode(user_id)
    state_text = "–í–ö–õ–Æ–ß–ï–ù–ê" if new_state else "–í–´–ö–õ–Æ–ß–ï–ù–ê"
    logger.info(f"User {user_id} toggled speak mode to {state_text}")
    await message.answer(f"üîä –û–∑–≤—É—á–∫–∞ –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å <b>{state_text}</b>.", parse_mode=ParseMode.HTML)


# --- Admin Commands (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@router.message(Command("admin"))
async def handle_admin(message: Message):
    user_id = get_user_id(message=message)
    if not user_id or not is_admin(user_id): return
    logger.info(f"Admin command executed by user {user_id}")
    admin_info = f"üõ†Ô∏è <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
    auth_users_list = getattr(settings, 'AUTHORIZED_USERS', [])
    auth_users_str = ', '.join(map(str, auth_users_list)) if isinstance(auth_users_list, (list, tuple)) and auth_users_list else '<i>–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω</i>'
    admin_info += f"üîë <b>–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n<code>{escape_html(auth_users_str)}</code>\n\n"
    admin_info += "‚úÖ –°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω. –î–ª—è –¥–µ—Ç–∞–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status."
    try:
        await message.reply(admin_info, parse_mode=ParseMode.HTML)
    except Exception as e:
         logger.error(f"Failed to send admin info: {e}")
         await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∞.")

async def run_shell_command(command: str) -> Tuple[str, str, int]:
    logger.debug(f"Running shell command: {command}")
    proc = await asyncio.create_subprocess_shell(command, stdout=asyncio.subprocess.PIPE, stderr=asyncio.subprocess.PIPE)
    stdout, stderr = await proc.communicate()
    exit_code = proc.returncode
    logger.debug(f"Command '{command}' finished with exit code {exit_code}")
    return stdout.decode(errors='ignore'), stderr.decode(errors='ignore'), exit_code

@router.message(Command("status"))
async def handle_status(message: Message, bot: Bot):
    user_id = get_user_id(message=message)
    if not user_id or not is_admin(user_id): return
    logger.info(f"Status command executed by user {user_id}")
    service_name = "telegram_gemini_bot.service"
    processing_msg = await message.reply(f"<i>–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ <code>{escape_html(service_name)}</code>...</i>", parse_mode=ParseMode.HTML)
    command = f"systemctl status {service_name}"
    output_parts = [f"<code>{escape_html(command)}</code>"]
    try:
        stdout, stderr, exit_code = await run_shell_command(command)
        output_parts.append(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: <code>{exit_code}</code>")
        max_lines = 15
        if stdout:
             stdout_lines = stdout.strip().splitlines(); stdout_limited = "\n".join(stdout_lines[-max_lines:])
             if len(stdout_lines) > max_lines: stdout_limited = "... (–Ω–∞—á–∞–ª–æ —É—Ä–µ–∑–∞–Ω–æ)\n" + stdout_limited
             output_parts.append(f"<b>Stdout:</b>\n<pre><code>{escape_html(stdout_limited)}</code></pre>")
        if stderr:
             stderr_lines = stderr.strip().splitlines(); stderr_limited = "\n".join(stderr_lines[-max_lines:])
             if len(stderr_lines) > max_lines: stderr_limited = "... (–Ω–∞—á–∞–ª–æ —É—Ä–µ–∑–∞–Ω–æ)\n" + stderr_limited
             output_parts.append(f"<b>Stderr:</b>\n<pre><code>{escape_html(stderr_limited)}</code></pre>")
        if not stdout and not stderr: output_parts.append("<i>(–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤—ã–≤–æ–¥)</i>")
    except FileNotFoundError: output_parts.append("\n‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ <code>systemctl</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    except Exception as e: output_parts.append(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {escape_html(str(e))}")
    final_output = "\n\n".join(output_parts); max_telegram_len = 4090
    if len(final_output) > max_telegram_len: final_output = final_output[:max_telegram_len] + "\n\n<i>‚úÇÔ∏è –í—ã–≤–æ–¥ –±—ã–ª —É—Ä–µ–∑–∞–Ω</i>"
    try:
        await bot.edit_message_text(final_output, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    except Exception as e:
        logger.error(f"Error editing status message: {e}. Sending as plain text.")
        plain_output = re.sub('<[^<]+?>', '', final_output)
        if len(plain_output) > max_telegram_len: plain_output = plain_output[:max_telegram_len] + "\n\n...–í—ã–≤–æ–¥ –±—ã–ª —É—Ä–µ–∑–∞–Ω"
        try: await bot.edit_message_text(plain_output, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None, disable_web_page_preview=True)
        except Exception as fallback_e: logger.error(f"Failed to send plain status info: {fallback_e}")

@router.message(Command("restart"))
async def handle_restart(message: Message):
    user_id = get_user_id(message=message)
    if not user_id or not is_admin(user_id): return
    logger.info(f"Restart command executed by user {user_id}")
    service_name = "telegram_gemini_bot.service"
    try: await message.reply(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ <code>{escape_html(service_name)}</code>...\n–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω.", parse_mode=ParseMode.HTML)
    except Exception as reply_e: logger.error(f"Failed to send restart confirmation message: {reply_e}")
    command = f"systemctl restart {service_name}"
    try:
        proc = await asyncio.create_subprocess_shell(command)
        logger.info(f"Launched command '{command}' (PID: {proc.pid}). Service should restart shortly.")
        await asyncio.sleep(1)
    except FileNotFoundError:
         logger.error("Command 'systemctl' not found. Cannot restart service.")
         try: await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ <code>systemctl</code> –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode=ParseMode.HTML)
         except Exception: pass
    except Exception as e:
        logger.error(f"Error launching restart command '{command}': {e}")
        try: await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.")
        except Exception: pass

# --- Callback Query Handlers ---

@router.callback_query(F.data.startswith("set_mood:"))
async def process_mood_callback(callback_query: CallbackQuery, bot: Bot):
    user_id = get_user_id(callback_query=callback_query)
    if not user_id:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return
    mood = callback_query.data.split(":")[1]
    await database.update_user_mood(user_id, mood)
    logger.info(f"User {user_id} set mood to {mood}")
    await callback_query.answer(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mood}")
    try:
        await bot.edit_message_text(f"‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: <code>{escape_html(mood)}</code>",
                                    chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    reply_markup=None,
                                    parse_mode=ParseMode.HTML)
    except TelegramBadRequest as e: logger.warning(f"Failed to edit mood message (might be old or unchanged): {e}")
    except Exception as e: logger.error(f"Unexpected error editing mood message: {e}")


# --- Message Handlers ---

@router.message(F.voice)
async def handle_voice_message(message: Message, bot: Bot):
    user_id = get_user_id(message=message)
    if not user_id: return
    logger.debug(f"Entered handle_voice_message for user {user_id}")
    logger.info(f"Received voice message from user {user_id} (duration: {message.voice.duration}s)")
    processing_msg = await message.reply("<i>–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ...</i>", parse_mode=ParseMode.HTML)

    ogg_filepath = get_temp_filepath("ogg")
    try:
        await bot.download(message.voice, destination=str(ogg_filepath))
        logger.debug(f"Voice message saved to {ogg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download voice message from {user_id}: {e}")
        await bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        await cleanup_temp_file(ogg_filepath)
        return

    try: await bot.edit_message_text("<i>–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...</i>", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=ParseMode.HTML)
    except TelegramBadRequest: pass

    recognized_text = await speech.recognize_speech(ogg_filepath)

    if recognized_text is not None:
        logger.info(f"User {user_id} voice recognized as: '{recognized_text}'")
        try:
            await bot.edit_message_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: \"<i>{escape_html(recognized_text)}</i>\"\n\n<i>–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...</i>",
                                        chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=ParseMode.HTML)
        except TelegramBadRequest: pass

        await database.add_message(user_id, 'user', recognized_text)
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        response_text = await gemini.generate_text_response(user_id, recognized_text)

        if response_text:
            tts_marker_start = "[TTS:"
            tts_marker_end = "]"
            if response_text.startswith(tts_marker_start) and response_text.endswith(tts_marker_end):
                text_to_speak = response_text[len(tts_marker_start):-len(tts_marker_end)].strip()
                if text_to_speak:
                    logger.info(f"Detected explicit TTS request from Gemini (voice input) for user {user_id}.")
                    await database.add_message(user_id, 'model', f"[–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{text_to_speak[:100]}...']")
                    await tts.speak_and_cleanup(bot, message.chat.id, text_to_speak)
                else:
                    logger.warning(f"Gemini returned TTS marker but text was empty (voice input) for user {user_id}")
                    await message.reply("–ù–µ –º–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.", parse_mode=None)
                    await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞: Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏]")
            else:
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π ---
                formatted_response = format_response_html(response_text)
                await database.add_message(user_id, 'model', response_text) # –í –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∞–¥–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                await send_response(bot, message.chat.id, user_id, formatted_response, parse_mode=ParseMode.HTML) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML

            try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
            except Exception as del_e: logger.warning(f"Could not delete processing message after voice reply: {del_e}")

        else:
            logger.error(f"Failed to generate Gemini response for recognized voice from user {user_id}")
            try:
                await bot.edit_message_text(f"–í—ã —Å–∫–∞–∑–∞–ª–∏: \"<i>{escape_html(recognized_text)}</i>\"\n\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.",
                                            chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=ParseMode.HTML)
            except TelegramBadRequest: pass
            await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI]")
    else:
        logger.warning(f"Could not recognize speech from user {user_id} (recognize_speech returned None)")
        await bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –§–æ—Ç–æ ---
@router.message(F.photo)
async def handle_photo_message(message: Message, bot: Bot):
    user_id = get_user_id(message=message)
    if not user_id: return
    photo_id = message.photo[-1].file_unique_id
    logger.info(f"Received photo '{photo_id}' from user {user_id}")
    processing_msg = await message.reply("<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...</i>", parse_mode=ParseMode.HTML)

    photo = message.photo[-1]
    temp_filename = f"{user_id}_{photo.file_unique_id}.jpg"
    jpg_filepath = settings.TEMP_DIR / temp_filename

    try:
        await bot.download(photo, destination=str(jpg_filepath))
        logger.debug(f"Photo '{photo_id}' saved to {jpg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download photo '{photo_id}' from {user_id}: {e}")
        await bot.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        await cleanup_temp_file(jpg_filepath)
        return

    analysis_result = await image_analyzer.analyze_image(jpg_filepath, user_id)
    ocr_text = analysis_result.get("ocr_text")
    vision_analysis = analysis_result.get("vision_analysis")
    ocr_useful = is_ocr_potentially_useful(ocr_text)

    analysis_summary_for_history = f"[–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '{photo_id}'] "
    final_response = ""

    if vision_analysis:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç Vision ---
        formatted_vision_analysis = format_response_html(vision_analysis)
        final_response += formatted_vision_analysis
        analysis_summary_for_history += f"Vision: '{vision_analysis[:100]}...'. "
        logger.info(f"Gemini Vision analysis received for photo '{photo_id}' user {user_id}.")
    else:
        final_response += "<i>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Gemini Vision).</i>"
        analysis_summary_for_history += "Vision: –û—à–∏–±–∫–∞/–ù–µ—Ç. "
        logger.warning(f"Gemini Vision analysis failed or returned empty for photo '{photo_id}' user {user_id}.")

    # –î–æ–±–∞–≤–ª—è–µ–º OCR –≤ –∏—Å—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω –ø–æ–ª–µ–∑–µ–Ω
    if ocr_text:
        analysis_summary_for_history += f"OCR: '{ocr_text[:100]}...'. "
        if ocr_useful: logger.info(f"OCR text found (useful, not shown) for photo '{photo_id}': length {len(ocr_text)}")
        else: logger.info(f"OCR text found (not useful) for photo '{photo_id}': length {len(ocr_text)}")
    elif ocr_text == "": analysis_summary_for_history += "OCR: –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. "
    else: analysis_summary_for_history += "OCR: –û—à–∏–±–∫–∞. "

    # –ó–∞–ø–∏—Å—å –≤ –ë–î
    await database.add_message(user_id, 'user', f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{photo_id}']")
    await database.add_message(user_id, 'model', analysis_summary_for_history.strip())

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ---
    await send_response(bot, message.chat.id, user_id, final_response.strip(), parse_mode=ParseMode.HTML)

    try:
        await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
    except Exception as del_err: logger.warning(f"Could not delete processing message after image reply: {del_err}")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
@router.message(F.document)
async def handle_document_message(message: Message, bot: Bot):
    user_id = get_user_id(message=message)
    if not user_id: return
    doc = message.document
    filename = doc.file_name if doc.file_name else f"file_{doc.file_unique_id}"
    mime_type = doc.mime_type
    file_size = doc.file_size if doc.file_size else 0
    file_id = doc.file_id

    logger.info(f"Received document '{filename}' from user {user_id} (Type: {mime_type}, Size: {file_size})")
    processing_msg = await message.reply(f"<i>–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{escape_html(filename)}'. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...</i>", parse_mode=ParseMode.HTML)

    safe_filename_part = "".join(c if c.isalnum() or c in ('_', '-') else '_' for c in filename)
    temp_filename = f"{user_id}_{file_id}_{safe_filename_part}"; max_len = 150
    if len(temp_filename) > max_len:
         name_part, ext_part = os.path.splitext(temp_filename); ext_len = len(ext_part)
         name_part = name_part[:max_len - ext_len - 1]; temp_filename = name_part + ext_part
    doc_filepath = settings.TEMP_DIR / temp_filename

    try:
        await bot.download(doc, destination=str(doc_filepath))
        logger.debug(f"Document '{filename}' saved to {doc_filepath}")
    except Exception as e:
        logger.error(f"Failed to download document '{filename}' from {user_id}: {e}")
        await bot.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{escape_html(filename)}'.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        await cleanup_temp_file(doc_filepath)
        return

    try:
        await bot.edit_message_text(f"<i>–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{escape_html(filename)}'...</i>", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=ParseMode.HTML)
    except TelegramBadRequest: pass

    process_result = await file_handler.process_file(doc_filepath, filename, mime_type, file_size)

    if process_result:
        status_message, analysis_result, extracted_content = process_result
        logger.info(f"File processing result for '{filename}': Status='{status_message}', Analysis received={analysis_result is not None}")

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º HTML –æ—Ç–≤–µ—Ç ---
        response_parts_html = [
            f"<b>–§–∞–π–ª:</b> <code>{escape_html(filename)}</code>",
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {escape_html(status_message)}"
        ]

        max_history_len = settings.MAX_HISTORY_FILE_CONTENT_LENGTH
        history_content_info = ""
        if extracted_content and not status_message.startswith("–§–∞–π–ª") and not status_message.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
             truncated_content = extracted_content[:max_history_len]
             history_content_info = f" [–°–æ–¥–µ—Ä–∂–∏–º–æ–µ{' (—É—Ä–µ–∑–∞–Ω–Ω–æ–µ)' if len(extracted_content) > max_history_len else ''}: {truncated_content}...]"
        elif not extracted_content and status_message.startswith("–ò–∑–≤–ª–µ–∫"):
             history_content_info = " [–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: (–ø—É—Å—Ç–æ)]"

        user_history_message = f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {filename}]"
        model_history_message = f"[–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {status_message}]{history_content_info}"

        if analysis_result:
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ ---
            formatted_analysis = format_response_html(analysis_result)
            response_parts_html.append(f"\n<b>–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (Gemini):</b>\n{formatted_analysis}") # –î–æ–±–∞–≤–ª—è–µ–º —É–∂–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML
            model_history_message += f" [–ê–Ω–∞–ª–∏–∑ Gemini: {analysis_result[:150]}...]"

        final_response_html = "\n\n".join(response_parts_html).strip()
        await database.add_message(user_id, 'user', user_history_message)
        await database.add_message(user_id, 'model', model_history_message)

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å HTML ---
        await send_response(bot, message.chat.id, user_id, final_response_html, parse_mode=ParseMode.HTML)

        try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except Exception as del_e: logger.warning(f"Could not delete processing message after file reply: {del_e}")

    else:
        logger.error(f"File processing failed unexpectedly for '{filename}' user {user_id} (process_file returned None)")
        fail_msg = f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{escape_html(filename)}'."
        await bot.edit_message_text(fail_msg, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        await database.add_message(user_id, 'user', f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {filename}]")
        await database.add_message(user_id, 'model', "[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞]")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –°–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(F.text)
async def handle_text_message(message: Message, bot: Bot):
    user_id = get_user_id(message=message)
    if not user_id: return
    user_text = message.text
    if not user_text or user_text.isspace(): return

    lower_text = user_text.lower()
    weather_keyword = "–ø–æ–≥–æ–¥–∞ "

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≥–æ–¥—É ---
    if lower_text.startswith(weather_keyword):
        city_input = user_text[len(weather_keyword):].strip() or "Moscow"
        logger.info(f"User {user_id} requested weather for '{city_input}' via text")
        processing_msg = await message.reply(f"<i>–£–∑–Ω–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è '{escape_html(city_input)}'...</i>", parse_mode=ParseMode.HTML)
        weather_report_markdown = await weather.get_weather(city_input)

        if weather_report_markdown:
            is_error_report = any(keyword.lower() in weather_report_markdown.lower() for keyword in ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "–æ—à–∏–±–∫–∞", "—Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ç–∞–π–º–∞—É—Ç", "invalid", "not found"])
            final_parse_mode = ParseMode.MARKDOWN_V2 if not is_error_report else None
            try:
                await bot.edit_message_text(weather_report_markdown, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=final_parse_mode, disable_web_page_preview=True)
            except TelegramBadRequest as e:
                 if "message is not modified" in str(e): logger.debug(f"Weather report for {city_input} was not modified.")
                 elif "can't parse entities" in str(e).lower() and final_parse_mode == ParseMode.MARKDOWN_V2:
                     logger.error(f"Error editing weather message with MarkdownV2: {e}. Retrying without parse mode.")
                     plain_text_report = re.sub(r'[\\`*_\[\]()~>#+\-=|{}.!]', '', weather_report_markdown)
                     await bot.edit_message_text(plain_text_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None, disable_web_page_preview=True)
                 else:
                     logger.error(f"Unhandled TelegramBadRequest editing weather message: {e}")
                     await message.reply(weather_report_markdown, parse_mode=None, disable_web_page_preview=True)
                     try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                     except Exception: pass
            except Exception as e:
                 logger.error(f"Unexpected error sending/editing weather message: {e}")
                 await message.reply(weather_report_markdown, parse_mode=None, disable_web_page_preview=True)
                 try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                 except Exception: pass
        else:
            await bot.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        return # –ü–æ–≥–æ–¥–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞

    # --- –ï—Å–ª–∏ –Ω–µ –ø–æ–≥–æ–¥–∞, —Ç–æ Gemini ---
    else:
        logger.info(f"Received text message from user {user_id} for Gemini: '{user_text[:100]}...'")
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        await database.add_message(user_id, 'user', user_text)
        response_text = await gemini.generate_text_response(user_id, user_text)

        if response_text:
            tts_marker_start = "[TTS:"
            tts_marker_end = "]"
            if response_text.startswith(tts_marker_start) and response_text.endswith(tts_marker_end):
                text_to_speak = response_text[len(tts_marker_start):-len(tts_marker_end)].strip()
                if text_to_speak:
                    logger.info(f"Detected explicit TTS request from Gemini for user {user_id}. Text: '{text_to_speak[:50]}...'")
                    await database.add_message(user_id, 'model', f"[–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{text_to_speak[:100]}...']")
                    await tts.speak_and_cleanup(bot, message.chat.id, text_to_speak)
                else:
                    logger.warning(f"Gemini returned TTS marker but text was empty for user {user_id}")
                    await message.reply("–ù–µ –º–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.", parse_mode=None)
                    await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞: Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏]")
            else:
                # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç ---
                formatted_response = format_response_html(response_text)
                await database.add_message(user_id, 'model', response_text) # –í –∏—Å—Ç–æ—Ä–∏—é –∫–ª–∞–¥–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                await send_response(bot, message.chat.id, user_id, formatted_response, parse_mode=ParseMode.HTML) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML
        else:
            logger.error(f"Failed to generate Gemini response for user {user_id}")
            error_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.reply(error_response, parse_mode=None)
            await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI]")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (—Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫) ---
async def send_response(bot: Bot, chat_id: int, user_id: int, text: str, parse_mode: Optional[str] = None, keyboard: Optional[InlineKeyboardMarkup] = None):
    """Sends response as text or voice based on user settings, handling long messages and errors."""
    speak_enabled = False
    try:
        speak_enabled = await database.get_speak_enabled(user_id)
    except Exception as e:
        logger.error(f"Failed to get speak mode for user {user_id}: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å speak_enabled = False

    text_to_send = text # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)

    try:
        if speak_enabled:
            logger.info(f"Sending voice response to user {user_id}")
            # –û—á–∏—â–∞–µ–º HTML/Markdown –ø–µ—Ä–µ–¥ –æ–∑–≤—É—á–∫–æ–π
            plain_text_for_tts = re.sub('<[^<]+?>', '', text) # –£–¥–∞–ª—è–µ–º HTML —Ç–µ–≥–∏
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ Markdown V2 —Å–∏–º–≤–æ–ª–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            # plain_text_for_tts = re.sub(r'[\\`*_\[\]()~>#+\-=|{}.!]', '', plain_text_for_tts)
            await tts.speak_and_cleanup(bot, chat_id, plain_text_for_tts, keyboard=keyboard) # –ü–µ—Ä–µ–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        else:
            logger.info(f"Sending text response to user {user_id} with parse_mode={parse_mode}")
            max_len = 4096
            if len(text_to_send) <= max_len:
                 try:
                     await bot.send_message(chat_id, text_to_send, parse_mode=parse_mode, disable_web_page_preview=True, reply_markup=keyboard)
                 except TelegramBadRequest as e:
                     if "can't parse entities" in str(e).lower() and parse_mode:
                         logger.error(f"Failed to send message with parse_mode={parse_mode}: {e}. Retrying without parse_mode.")
                         await bot.send_message(chat_id, text, parse_mode=None, disable_web_page_preview=True, reply_markup=keyboard)
                     else:
                         logger.error(f"Unhandled TelegramBadRequest sending message to {chat_id}: {e}")
                         raise # –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º
            else:
                 logger.warning(f"Response for user {user_id} is too long ({len(text_to_send)} chars). Sending in parts.")
                 # –£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ, –º–æ–∂–µ—Ç –ª–æ–º–∞—Ç—å HTML/Markdown –Ω–∞ —Å—Ç—ã–∫–∞—Ö
                 parts = []
                 for i in range(0, len(text_to_send), max_len):
                      parts.append(text_to_send[i:i + max_len])

                 for i, part in enumerate(parts):
                     if not part.strip(): continue
                     logger.debug(f"Sending part {i+1}/{len(parts)} ({len(part)} chars) to chat {chat_id}")
                     current_keyboard = keyboard if i == len(parts) - 1 else None
                     try:
                         await bot.send_message(chat_id, part, parse_mode=parse_mode, disable_web_page_preview=True, reply_markup=current_keyboard)
                     except TelegramBadRequest as e:
                         if "can't parse entities" in str(e).lower() and parse_mode:
                             logger.error(f"Failed to send part {i+1} with parse_mode={parse_mode}: {e}. Retrying without parse_mode.")
                             await bot.send_message(chat_id, part, parse_mode=None, disable_web_page_preview=True, reply_markup=current_keyboard)
                         else:
                             logger.error(f"Unhandled TelegramBadRequest sending part {i+1} to {chat_id}: {e}")
                             # –ï—Å–ª–∏ –¥–∞–∂–µ –±–µ–∑ parse_mode –Ω–µ —É—à–ª–æ, –º–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —á–∞—Å—Ç—å
                     except Exception as part_e:
                          logger.error(f"Failed to send part {i+1} to {chat_id}: {part_e}")

                     if i < len(parts) - 1:
                         await asyncio.sleep(0.8) # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏

    except Exception as e:
        logger.error(f"General error in send_response for user {user_id} (chat {chat_id}): {e}")
        logger.exception(e)
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
        if not speak_enabled:
            try:
                await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", parse_mode=None)
            except Exception:
                logger.error(f"Failed even to send the error notification to chat {chat_id}")