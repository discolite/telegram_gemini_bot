# --- START OF FILE bot/handlers.py ---

import asyncio
import os
# import subprocess # <<< –£–î–ê–õ–ï–ù –ù–ï–ù–£–ñ–ù–´–ô –ò–ú–ü–û–†–¢ >>>
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile, InputFile, User
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from loguru import logger
from typing import Optional, Dict, Tuple # <<< –î–æ–±–∞–≤–∏–ª Tuple –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ run_shell_command >>>
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
from config import settings
from services import (
    gemini,
    weather,
    speech,
    image_analyzer,
    file_handler,
    database,
    tts,  # <-- –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ tts –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
    translator,
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä—ã
from utils.helpers import (
    get_temp_filepath,
    cleanup_temp_file,
    escape_markdown_v2,
    is_ocr_potentially_useful
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from .keyboards import get_mood_keyboard

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id ---
def get_user_id(message: Optional[Message] = None, callback_query: Optional[CallbackQuery] = None) -> Optional[int]:
    """Safely extracts user_id from Message or CallbackQuery."""
    user: Optional[User] = None
    if message and message.from_user: user = message.from_user
    elif callback_query and callback_query.from_user: user = callback_query.from_user
    if user: return user.id
    logger.warning("Could not extract user_id from event.")
    return None

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞ ---
def is_admin(user_id: int) -> bool:
    """Checks if the user ID is in the authorized list."""
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ AUTHORIZED_USERS —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º/–∫–æ—Ä—Ç–µ–∂–µ–º
    auth_list = getattr(settings, 'AUTHORIZED_USERS', [])
    if not isinstance(auth_list, (list, tuple)):
        logger.error("settings.AUTHORIZED_USERS is not a list or tuple.")
        return False
    return user_id in auth_list

# --- Command Handlers ---

@router.message(Command("start", "help"))
async def handle_start(message: Message):
    """Handles /start and /help commands."""
    user_id = get_user_id(message=message)
    if not user_id: return
    user_name = message.from_user.full_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await database.get_user_settings(user_id)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏ () –¥–ª—è MarkdownV2
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {escape_markdown_v2(user_name)}\!\n\n"
        "–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI\-–±–æ—Ç\. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üß† **–û–±—â–µ–Ω–∏–µ:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é Google Gemini\. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—Å–∞–≤ `–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥>`\.\n"
        "üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:** –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É\.\n"
        "üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —è –æ–ø–∏—à—É –µ—ë —Å –ø–æ–º–æ—â—å—é Gemini Vision \\(—Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è\\)\.\n"
        "üìÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:** –û—Ç–ø—Ä–∞–≤—å \.txt, \.pdf, \.csv, \.xlsx –∏–ª–∏ \.docx, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\.\n"
        "‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞ \\(–∫–æ–º–∞–Ω–¥–∞\\):** `/weather <–≥–æ—Ä–æ–¥>` \\(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞\\)\.\n"
        "üé≠ **–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:** `/mood` \- –≤—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å \\(–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ\., —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π\\)\.\n"
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –°–ü–†–ê–í–ö–ï ---
        "üåê **–ü–µ—Ä–µ–≤–æ–¥ –∏ –û–∑–≤—É—á–∫–∞:**\n"
        "   \- –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è **–ø–µ—Ä–µ–≤–µ—Å—Ç–∏** —Ç–µ–∫—Å—Ç \\(–Ω–∞–ø—Ä\., `–ø–µ—Ä–µ–≤–µ–¥–∏ 'hello' –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π`\\)\.\n"
        "   \- –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è **–æ–∑–≤—É—á–∏—Ç—å** —Ç–µ–∫—Å—Ç \\(–Ω–∞–ø—Ä\., `–æ–∑–≤—É—á—å '–ø—Ä–∏–≤–µ—Ç –º–∏—Ä'` –∏–ª–∏ `—Å–∫–∞–∂–∏ '—è –±–æ—Ç'`\\)\.\n"
        "   \- `/toggle_speak` \- –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–∑–≤—É—á–∫—É –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤\.\n\n"
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –°–ü–†–ê–í–ö–ï ---
        f"–¢–≤–æ–π ID: `{user_id}`\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\."
    )
    if is_admin(user_id):
        help_text += "\n\n**–ê–¥–º–∏–Ω\-–∫–æ–º–∞–Ω–¥—ã:**\n`/admin` `/status` `/restart`"

    try:
        await message.answer(help_text, parse_mode="MarkdownV2")
    except TelegramBadRequest as e:
        logger.error(f"Failed to send help message with MarkdownV2: {e}")
        help_text_plain = ( # –í–µ—Ä—Å–∏—è –±–µ–∑ MarkdownV2
            f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
            "–û–±—â–µ–Ω–∏–µ: –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é Google Gemini. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—Å–∞–≤ '–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥>'.\n"
            "–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É.\n"
            "–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —è –æ–ø–∏—à—É –µ—ë —Å –ø–æ–º–æ—â—å—é Gemini Vision (—Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è).\n"
            "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤: –û—Ç–ø—Ä–∞–≤—å .txt, .pdf, .csv, .xlsx –∏–ª–∏ .docx, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n"
            "–ü–æ–≥–æ–¥–∞ (–∫–æ–º–∞–Ω–¥–∞): /weather <–≥–æ—Ä–æ–¥> (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞).\n"
            "–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: /mood - –≤—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ., —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π).\n"
            # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø –í –°–ü–†–ê–í–ö–ï (Plain Text) ---
            "–ü–µ—Ä–µ–≤–æ–¥ –∏ –û–∑–≤—É—á–∫–∞:\n"
            "   - –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä., `–ø–µ—Ä–µ–≤–µ–¥–∏ 'hello' –Ω–∞ –Ω–µ–º–µ—Ü–∫–∏–π`).\n"
            "   - –ü–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è –æ–∑–≤—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç (–Ω–∞–ø—Ä., `–æ–∑–≤—É—á—å '–ø—Ä–∏–≤–µ—Ç –º–∏—Ä'` –∏–ª–∏ `—Å–∫–∞–∂–∏ '—è –±–æ—Ç'`).\n"
            "   - /toggle_speak - –≤–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–∑–≤—É—á–∫—É –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –°–ü–†–ê–í–ö–ï (Plain Text) ---
            f"–¢–≤–æ–π ID: {user_id}\n"
            "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        if is_admin(user_id):
             help_text_plain += "\n\n–ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã:\n/admin /status /restart"
        try:
            await message.answer(help_text_plain, parse_mode=None)
            logger.info("Sent help message without Markdown as fallback.")
        except Exception as fallback_e:
            logger.error(f"Failed to send plain help message: {fallback_e}")


@router.message(Command("weather"))
async def handle_weather(message: Message, command: CommandObject, bot: Bot):
    """Handles /weather command."""
    user_id = get_user_id(message=message)
    if not user_id: return
    city_input = command.args if command.args else "Moscow"
    logger.info(f"User {user_id} requested weather for '{city_input}' using /weather command")
    processing_msg = await message.answer(f"–£–∑–Ω–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è '{escape_markdown_v2(city_input)}'...", parse_mode=None)
    weather_report = await weather.get_weather(city_input)
    if weather_report:
        final_parse_mode: Optional[str] = "MarkdownV2"
        error_keywords = ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "–æ—à–∏–±–∫–∞", "—Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ç–∞–π–º–∞—É—Ç", "invalid", "not found"]
        if any(keyword.lower() in weather_report.lower() for keyword in error_keywords):
            final_parse_mode = None

        try:
            await bot.edit_message_text(weather_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=final_parse_mode, disable_web_page_preview=True)
        except TelegramBadRequest as e:
             if "message is not modified" in str(e): logger.debug(f"Weather report for {city_input} was not modified.")
             else:
                 logger.error(f"Error editing weather message (parse_mode={final_parse_mode}): {e}. Report: '{weather_report[:200]}...'")
                 try:
                     await bot.edit_message_text(weather_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None, disable_web_page_preview=True)
                 except Exception as fallback_edit_err:
                      logger.error(f"Failed to edit weather message even without parse_mode: {fallback_edit_err}")
                      await message.answer(weather_report, parse_mode=None, disable_web_page_preview=True)
        except Exception as e:
             logger.error(f"Unexpected error editing weather message: {e}")
             await message.answer(weather_report, parse_mode=final_parse_mode, disable_web_page_preview=True)
             try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
             except Exception: pass
    else:
        await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)

@router.message(Command("mood"))
async def handle_mood(message: Message):
    """Handles /mood command, shows mood selection keyboard."""
    user_id = get_user_id(message=message)
    if not user_id: return
    settings_data = await database.get_user_settings(user_id)
    current_mood = settings_data.get('mood', settings.DEFAULT_MOOD)
    await message.answer(f"–í—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\. –¢–µ–∫—É—â–∏–π: `{escape_markdown_v2(current_mood)}`", reply_markup=get_mood_keyboard(), parse_mode="MarkdownV2")

# <<< –§–£–ù–ö–¶–ò–Ø handle_speak –£–î–ê–õ–ï–ù–ê >>>

@router.message(Command("toggle_speak"))
async def handle_toggle_speak(message: Message):
    """Handles /toggle_speak command."""
    user_id = get_user_id(message=message)
    if not user_id: return
    new_state = await database.toggle_speak_mode(user_id)
    state_text = "–í–ö–õ–Æ–ß–ï–ù–ê" if new_state else "–í–´–ö–õ–Æ–ß–ï–ù–ê"
    logger.info(f"User {user_id} toggled speak mode to {state_text}")
    await message.answer(f"üîä –û–∑–≤—É—á–∫–∞ –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å **{state_text}**\.", parse_mode="MarkdownV2")

# <<< –§–£–ù–ö–¶–ò–Ø handle_translate –£–î–ê–õ–ï–ù–ê >>>


# ===========================================
# === –ù–û–í–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –ù–ê–ß–ò–ù–ê–Æ–¢–°–Ø ===
# ===========================================

@router.message(Command("admin"))
async def handle_admin(message: Message):
    """Handles /admin command (admins only)."""
    user_id = get_user_id(message=message)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not user_id or not is_admin(user_id):
        logger.warning(f"Unauthorized attempt to use /admin by user {user_id or 'unknown'}")
        # –û–±—ã—á–Ω–æ middleware —É–∂–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç, –Ω–æ –º–æ–∂–Ω–æ –∏ —è–≤–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞—Ç—å
        return

    logger.info(f"Admin command executed by user {user_id}")
    admin_info = f"üõ†Ô∏è *–ê–¥–º–∏–Ω\-–ø–∞–Ω–µ–ª—å*\n\n"

    # –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    auth_users_list = getattr(settings, 'AUTHORIZED_USERS', [])
    if isinstance(auth_users_list, (list, tuple)) and auth_users_list:
        auth_users_str = ', '.join(map(str, auth_users_list))
    else:
        auth_users_str = '_–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω_'
    admin_info += f"üîë **–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**\n`{escape_markdown_v2(auth_users_str)}`\n\n"

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å)
    admin_info += "‚úÖ –°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω \(–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∑–∞–ø—É—Å–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã\)\. –î–ª—è –¥–µ—Ç–∞–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/status`\."

    try:
        await message.reply(admin_info, parse_mode="MarkdownV2")
    except TelegramBadRequest as e:
         logger.error(f"Failed to send admin info with MarkdownV2: {e}")
         # Fallback –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
         admin_info_plain = f"–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å\n\n"
         admin_info_plain += f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n{auth_users_str}\n\n"
         admin_info_plain += "–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ –∞–∫—Ç–∏–≤–µ–Ω. –î–ª—è –¥–µ—Ç–∞–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status."
         try:
             await message.reply(admin_info_plain, parse_mode=None)
         except Exception as plain_e:
              logger.error(f"Failed to send plain admin info: {plain_e}")


async def run_shell_command(command: str) -> Tuple[str, str, int]:
    """Executes a shell command asynchronously and returns output."""
    logger.debug(f"Running shell command: {command}")
    proc = await asyncio.create_subprocess_shell(
        command,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await proc.communicate()
    exit_code = proc.returncode
    logger.debug(f"Command '{command}' finished with exit code {exit_code}")
    return stdout.decode(errors='ignore'), stderr.decode(errors='ignore'), exit_code


@router.message(Command("status"))
async def handle_status(message: Message, bot: Bot): # –î–æ–±–∞–≤–∏–ª bot, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è bot.edit_message_text
    """Handles /status command (admins only). Gets systemd service status."""
    user_id = get_user_id(message=message)
    if not user_id or not is_admin(user_id):
        logger.warning(f"Unauthorized attempt to use /status by user {user_id or 'unknown'}")
        return

    logger.info(f"Status command executed by user {user_id}")
    # –ò–º—è —Å–µ—Ä–≤–∏—Å–∞ systemd (–¥–æ–ª–∂–Ω–æ —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ .service)
    service_name = "telegram_gemini_bot.service"
    processing_msg = await message.reply(f"–ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–∞ `{escape_markdown_v2(service_name)}`...", parse_mode="MarkdownV2")

    command = f"systemctl status {service_name}"
    output_parts = [f"`{command}`"]
    try:
        stdout, stderr, exit_code = await run_shell_command(command)

        output_parts.append(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: `{exit_code}`")

        max_lines = 15 # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã–≤–æ–¥ –¥–ª—è Telegram
        if stdout:
             stdout_lines = stdout.strip().splitlines()
             stdout_limited = "\n".join(stdout_lines[-max_lines:])
             if len(stdout_lines) > max_lines:
                 stdout_limited = "... (–Ω–∞—á–∞–ª–æ —É—Ä–µ–∑–∞–Ω–æ)\n" + stdout_limited
             # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –±–ª–æ–∫–∞ –∫–æ–¥–∞ MarkdownV2
             escaped_stdout = escape_markdown_v2(stdout_limited)
             output_parts.append(f"**Stdout:**\n```\n{escaped_stdout}\n```")
        if stderr:
             stderr_lines = stderr.strip().splitlines()
             stderr_limited = "\n".join(stderr_lines[-max_lines:])
             if len(stderr_lines) > max_lines:
                 stderr_limited = "... (–Ω–∞—á–∞–ª–æ —É—Ä–µ–∑–∞–Ω–æ)\n" + stderr_limited
             escaped_stderr = escape_markdown_v2(stderr_limited)
             output_parts.append(f"**Stderr:**\n```\n{escaped_stderr}\n```")

        if not stdout and not stderr and exit_code == 0: # –£—Ç–æ—á–Ω—è–µ–º —Å–ª—É—á–∞–π –ø—É—Å—Ç–æ–≥–æ –≤—ã–≤–æ–¥–∞
             output_parts.append("_(–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤—ã–≤–æ–¥)_")
        elif not stdout and not stderr and exit_code != 0:
             output_parts.append("_(–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤—ã–≤–æ–¥, –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –Ω–µ 0)_")


    except FileNotFoundError:
         logger.error(f"Command 'systemctl' not found.")
         output_parts.append("\n‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ `systemctl` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")
    except Exception as e:
        logger.error(f"Error executing status command '{command}': {e}")
        output_parts.append(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {escape_markdown_v2(str(e))}")

    final_output = "\n\n".join(output_parts)
    max_telegram_len = 4090
    if len(final_output) > max_telegram_len:
        final_output = final_output[:max_telegram_len] + "\n\n‚úÇÔ∏è _–í—ã–≤–æ–¥ –±—ã–ª —É—Ä–µ–∑–∞–Ω_"

    try:
        await bot.edit_message_text(final_output,
                                    chat_id=processing_msg.chat.id,
                                    message_id=processing_msg.message_id,
                                    parse_mode="MarkdownV2",
                                    disable_web_page_preview=True)
    except TelegramBadRequest as e:
         logger.error(f"Error editing status message with MarkdownV2: {e}. Falling back to plain text.")
         try:
             # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ Markdown
             plain_output_parts = [f"–ö–æ–º–∞–Ω–¥–∞: {command}"]
             if 'exit_code' in locals(): plain_output_parts.append(f"–ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {exit_code}")
             if 'stdout_limited' in locals() and stdout_limited: plain_output_parts.append(f"Stdout:\n{stdout_limited}")
             if 'stderr_limited' in locals() and stderr_limited: plain_output_parts.append(f"Stderr:\n{stderr_limited}")
             if 'stdout' in locals() and 'stderr' in locals() and not stdout and not stderr:
                 if 'exit_code' in locals() and exit_code == 0: plain_output_parts.append("(–ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –Ω–æ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤—ã–≤–æ–¥)")
                 else: plain_output_parts.append("(–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –≤—ã–≤–æ–¥)")
             plain_output = "\n\n".join(plain_output_parts)

             if len(plain_output) > max_telegram_len:
                 plain_output = plain_output[:max_telegram_len] + "\n\n...–í—ã–≤–æ–¥ –±—ã–ª —É—Ä–µ–∑–∞–Ω"
             await bot.edit_message_text(plain_output,
                                         chat_id=processing_msg.chat.id,
                                         message_id=processing_msg.message_id,
                                         parse_mode=None,
                                         disable_web_page_preview=True)
         except Exception as fallback_e:
              logger.error(f"Failed to send plain status info: {fallback_e}")


@router.message(Command("restart"))
async def handle_restart(message: Message):
    """Handles /restart command (admins only). Restarts systemd service."""
    user_id = get_user_id(message=message)
    if not user_id or not is_admin(user_id):
        logger.warning(f"Unauthorized attempt to use /restart by user {user_id or 'unknown'}")
        return

    logger.info(f"Restart command executed by user {user_id}")
    service_name = "telegram_gemini_bot.service"
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –î–û –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    try:
        await message.reply(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ `{escape_markdown_v2(service_name)}`\.\.\.\n"
                            "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω\. –û—Ç–≤–µ—Ç –æ—Ç `systemctl` –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏–π—Ç–∏\.", parse_mode="MarkdownV2")
    except Exception as reply_e:
         logger.error(f"Failed to send restart confirmation message: {reply_e}")
         # –í—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å

    command = f"systemctl restart {service_name}"
    try:
        proc = await asyncio.create_subprocess_shell(command)
        # –ù–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫
        logger.info(f"Launched command '{command}' (PID: {proc.pid}). Service should restart shortly.")
        # –î–∞–µ–º systemd –Ω–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
        await asyncio.sleep(1)
    except FileNotFoundError:
         logger.error(f"Command 'systemctl' not found. Cannot restart service.")
         # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –º–æ–∂–µ—Ç –Ω–µ —É—Å–ø–µ—Ç—å
         try: await message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ `systemctl` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", parse_mode="MarkdownV2")
         except Exception: pass
    except Exception as e:
        logger.error(f"Error launching restart command '{command}': {e}")
        try: await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.", parse_mode=None)
        except Exception: pass

# =========================================
# === –ù–û–í–´–ï –ê–î–ú–ò–ù–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –ö–û–ù–ß–ê–Æ–¢–°–Ø ===
# =========================================


# --- Callback Query Handlers ---

@router.callback_query(F.data.startswith("set_mood:"))
async def process_mood_callback(callback_query: CallbackQuery, bot: Bot):
    """Handles mood selection callbacks."""
    user_id = get_user_id(callback_query=callback_query)
    if not user_id:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    mood = callback_query.data.split(":")[1]
    await database.update_user_mood(user_id, mood)
    logger.info(f"User {user_id} set mood to {mood}")
    await callback_query.answer(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mood}")
    try:
        await bot.edit_message_text(f"‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{escape_markdown_v2(mood)}`",
                                    chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    reply_markup=None,
                                    parse_mode="MarkdownV2")
    except TelegramBadRequest as e: logger.warning(f"Failed to edit mood message (might be old or unchanged): {e}")
    except Exception as e: logger.error(f"Unexpected error editing mood message: {e}")

# --- Message Handlers ---

@router.message(F.voice)
async def handle_voice_message(message: Message, bot: Bot):
    """Handles voice messages."""
    user_id = get_user_id(message=message)
    if not user_id: return
    logger.debug(f"Entered handle_voice_message for user {user_id}")
    logger.info(f"Received voice message from user {user_id} (duration: {message.voice.duration}s)")
    processing_msg = await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", parse_mode=None)

    ogg_filepath = get_temp_filepath("ogg")
    try:
        await bot.download(message.voice, destination=str(ogg_filepath))
        logger.debug(f"Voice message saved to {ogg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download voice message from {user_id}: {e}")
        await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await cleanup_temp_file(ogg_filepath)
        return

    try:
        await bot.edit_message_text("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
    except TelegramBadRequest: pass

    recognized_text = await speech.recognize_speech(ogg_filepath) # recognize_speech handles cleanup

    if recognized_text is not None:
        logger.info(f"User {user_id} voice recognized as: '{recognized_text}'")
        try:
            await bot.edit_message_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{escape_markdown_v2(recognized_text)}\"\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç\.\.\.",
                                        chat_id=processing_msg.chat.id,
                                        message_id=processing_msg.message_id,
                                        parse_mode="MarkdownV2")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e): logger.error(f"Error editing recognized text message: {e}")

        await database.add_message(user_id, 'user', recognized_text)
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        response_text = await gemini.generate_text_response(user_id, recognized_text)

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ TTS –º–∞—Ä–∫–µ—Ä –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –ì–û–õ–û–°–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        if response_text:
            tts_marker_start = "[TTS:"
            tts_marker_end = "]"
            if response_text.startswith(tts_marker_start) and response_text.endswith(tts_marker_end):
                text_to_speak = response_text[len(tts_marker_start):-len(tts_marker_end)]
                if text_to_speak:
                    logger.info(f"Detected explicit TTS request from Gemini (voice input) for user {user_id}.")
                    await database.add_message(user_id, 'model', f"[–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{text_to_speak[:100]}...']")
                    await tts.speak_and_cleanup(bot, message.chat.id, text_to_speak)
                else:
                    logger.warning(f"Gemini returned TTS marker but text was empty (voice input) for user {user_id}")
                    await message.reply("–ù–µ –º–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.", parse_mode=None)
                    await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞: Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏]")
            else:
                # –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç /toggle_speak)
                await database.add_message(user_id, 'model', response_text)
                await send_response(bot, message.chat.id, user_id, response_text)

            try:
                await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
            except TelegramBadRequest as del_e: logger.warning(f"Could not delete processing message after voice reply: {del_e}")
            except Exception as del_e: logger.error(f"Unexpected error deleting processing message: {del_e}")
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô –í –û–¢–í–ï–¢–ï –ù–ê –ì–û–õ–û–° ---
        else:
            logger.error(f"Failed to generate Gemini response for recognized voice from user {user_id}")
            try:
                await bot.edit_message_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{escape_markdown_v2(recognized_text)}\"\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI\.",
                                            chat_id=processing_msg.chat.id,
                                            message_id=processing_msg.message_id,
                                            parse_mode="MarkdownV2")
            except TelegramBadRequest: pass
    else:
        logger.warning(f"Could not recognize speech from user {user_id} (recognize_speech returned None)")
        await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –§–æ—Ç–æ ---
@router.message(F.photo)
async def handle_photo_message(message: Message, bot: Bot):
    """Handles photo messages, sending only Vision analysis to the user."""
    user_id = get_user_id(message=message)
    if not user_id: return
    photo_id = message.photo[-1].file_unique_id
    logger.info(f"Received photo '{photo_id}' from user {user_id}")
    processing_msg = await message.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", parse_mode=None)

    photo = message.photo[-1]
    temp_filename = f"{user_id}_{photo.file_unique_id}.jpg"
    jpg_filepath = settings.TEMP_DIR / temp_filename

    try:
        await bot.download(photo, destination=str(jpg_filepath))
        logger.debug(f"Photo '{photo_id}' saved to {jpg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download photo '{photo_id}' from {user_id}: {e}")
        await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await cleanup_temp_file(jpg_filepath)
        return

    analysis_result = await image_analyzer.analyze_image(jpg_filepath, user_id) # jpg_filepath —É–¥–∞–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
    ocr_text = analysis_result.get("ocr_text")
    vision_analysis = analysis_result.get("vision_analysis")

    response_parts = []
    analysis_summary_for_history = f"[–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '{photo_id}'] "

    if vision_analysis:
        escaped_vision_analysis = escape_markdown_v2(vision_analysis)
        response_parts.append(escaped_vision_analysis) # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û Vision
        analysis_summary_for_history += f"Vision: '{vision_analysis[:100]}...'. "
        logger.info(f"Gemini Vision analysis received for photo '{photo_id}' user {user_id}.")
    else:
        response_parts.append("_–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è \(Gemini Vision\)\._")
        analysis_summary_for_history += "Vision: –û—à–∏–±–∫–∞/–ù–µ—Ç. "
        logger.warning(f"Gemini Vision analysis failed or returned empty for photo '{photo_id}' user {user_id}.")

    # –õ–æ–≥–∏—Ä—É–µ–º OCR, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ response_parts
    if ocr_text is not None and ocr_text != "":
        analysis_summary_for_history += f"OCR: '{ocr_text[:100]}...'. "
        logger.info(f"OCR text found (but not shown to user {user_id}) for photo '{photo_id}': length {len(ocr_text)}")
    elif ocr_text == "":
        analysis_summary_for_history += "OCR: –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. "
        logger.debug(f"No text found (OCR) for photo '{photo_id}' user {user_id}.")
    else:
        analysis_summary_for_history += "OCR: –û—à–∏–±–∫–∞. "
        logger.warning(f"OCR returned None (error) for photo '{photo_id}' user {user_id}.")

    # –ó–∞–ø–∏—Å—å –≤ –ë–î
    await database.add_message(user_id, 'user', f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{photo_id}']")
    await database.add_message(user_id, 'model', analysis_summary_for_history.strip())

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    final_response = "\n\n".join(response_parts).strip()
    parse_mode_final: Optional[str] = "MarkdownV2"

    try:
        await message.reply(final_response, parse_mode=parse_mode_final, disable_web_page_preview=True)
        logger.info(f"Successfully sent formatted image analysis response (Vision only) to user {user_id}")
        try:
            await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except Exception as del_err:
            logger.warning(f"Could not delete processing message after image reply: {del_err}")

    except TelegramBadRequest as e:
        logger.error(f"Telegram API error sending formatted analysis (parse_mode={parse_mode_final}): {e}. Response: {final_response[:200]}...")
        try:
            fallback_text = vision_analysis if vision_analysis else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            await message.reply(fallback_text, parse_mode=None, disable_web_page_preview=True)
            logger.info(f"Successfully sent fallback unformatted analysis (Vision only) to user {user_id}")
            try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
            except Exception: pass
        except Exception as fallback_err:
             logger.error(f"Failed to send fallback unformatted analysis: {fallback_err}")
             try: await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", parse_mode=None)
             except Exception: pass
             try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
             except Exception: pass
    except Exception as e:
        logger.error(f"General error sending final image analysis response: {e}")
        logger.exception(e)
        try: await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—á–µ–Ω—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", parse_mode=None)
        except Exception: pass
        try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except Exception: pass

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
@router.message(F.document)
async def handle_document_message(message: Message, bot: Bot):
    """Handles document messages (txt, pdf, csv, xlsx, docx)."""
    user_id = get_user_id(message=message)
    if not user_id: return
    doc = message.document
    filename = doc.file_name if doc.file_name else f"file_{doc.file_unique_id}"
    mime_type = doc.mime_type
    file_size = doc.file_size if doc.file_size else 0
    file_id = doc.file_id
    file_ext = filename.split('.')[-1].lower() if '.' in filename else None

    logger.info(f"Received document '{filename}' from user {user_id} (Type: {mime_type}, Size: {file_size})")
    processing_msg = await message.reply(f"–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{escape_markdown_v2(filename)}'. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...", parse_mode=None)

    safe_filename_part = "".join(c if c.isalnum() or c in ('_', '-') else '_' for c in filename)
    temp_filename = f"{user_id}_{file_id}_{safe_filename_part}"; max_len = 150
    if len(temp_filename) > max_len:
         name_part, ext_part = os.path.splitext(temp_filename)
         ext_len = len(ext_part)
         name_part = name_part[:max_len - ext_len - 1]
         temp_filename = name_part + ext_part
    doc_filepath = settings.TEMP_DIR / temp_filename

    try:
        await bot.download(doc, destination=str(doc_filepath))
        logger.debug(f"Document '{filename}' saved to {doc_filepath}")
    except Exception as e:
        logger.error(f"Failed to download document '{filename}' from {user_id}: {e}")
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{escape_markdown_v2(filename)}'.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await cleanup_temp_file(doc_filepath)
        return

    try:
        await bot.edit_message_text(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{escape_markdown_v2(filename)}'...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
    except TelegramBadRequest: pass

    process_result = await file_handler.process_file(doc_filepath, filename, mime_type, file_size) # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä–∏

    if process_result:
        status_message, analysis_result, extracted_content = process_result # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º 3 –∑–Ω–∞—á–µ–Ω–∏—è
        logger.info(f"File processing result for '{filename}': Status='{status_message}', Analysis received={analysis_result is not None}")

        response_parts = [
            f"**–§–∞–π–ª:** `{escape_markdown_v2(filename)}`",
            f"**–°—Ç–∞—Ç—É—Å:** {escape_markdown_v2(status_message)}"
        ]

        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å —É—Ä–µ–∑–∞–Ω–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ---
        max_history_len = settings.MAX_HISTORY_FILE_CONTENT_LENGTH
        history_content_info = ""
        if extracted_content and not status_message.startswith("–§–∞–π–ª") and not status_message.startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
             if len(extracted_content) > max_history_len:
                 history_content_info = f" [–°–æ–¥–µ—Ä–∂–∏–º–æ–µ (—É—Ä–µ–∑–∞–Ω–Ω–æ–µ): {extracted_content[:max_history_len]}...]"
             else:
                 history_content_info = f" [–°–æ–¥–µ—Ä–∂–∏–º–æ–µ: {extracted_content[:max_history_len]}]" # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ, –µ—Å–ª–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø –ò–°–¢–û–†–ò–ò ---

        user_history_message = f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {filename}]"
        model_history_message = f"[–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {status_message}]{history_content_info}" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ –∫–æ–Ω—Ç–µ–Ω—Ç–µ

        if analysis_result:
            response_parts.append(f"**–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ \(Gemini\):**\n{escape_markdown_v2(analysis_result)}")
            model_history_message += f" [–ê–Ω–∞–ª–∏–∑ Gemini: {analysis_result[:150]}...]" # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ –æ–± –∞–Ω–∞–ª–∏–∑–µ

        final_response = "\n\n".join(response_parts).strip()
        await database.add_message(user_id, 'user', user_history_message)
        await database.add_message(user_id, 'model', model_history_message)

        await send_response(bot, message.chat.id, user_id, final_response, parse_mode="MarkdownV2")

        try:
            await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except TelegramBadRequest as del_e: logger.warning(f"Could not delete processing message after file reply: {del_e}")
        except Exception as del_e: logger.error(f"Unexpected error deleting processing message: {del_e}")

    else:
        logger.error(f"File processing failed unexpectedly for '{filename}' user {user_id} (process_file returned None)")
        fail_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{escape_markdown_v2(filename)}'."
        await bot.edit_message_text(fail_msg, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await database.add_message(user_id, 'user', f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {filename}]")
        await database.add_message(user_id, 'model', "[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞]")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –°–æ–æ–±—â–µ–Ω–∏–π ---
@router.message(F.text)
async def handle_text_message(message: Message, bot: Bot):
    """
    Handles regular text messages.
    Checks for weather request.
    If not weather, processes using Gemini, detecting translation and TTS requests.
    """
    user_id = get_user_id(message=message)
    if not user_id: return
    user_text = message.text
    if not user_text or user_text.isspace():
        logger.debug(f"Ignoring empty/whitespace message from user {user_id}")
        return

    lower_text = user_text.lower()
    weather_keyword = "–ø–æ–≥–æ–¥–∞ "

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    if lower_text.startswith(weather_keyword):
        city_input = user_text[len(weather_keyword):].strip()
        if not city_input:
            city_input = "Moscow" # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info(f"User {user_id} requested weather via text, defaulting to Moscow")
        else:
            logger.info(f"User {user_id} requested weather for '{city_input}' via text")

        processing_msg = await message.reply(f"–£–∑–Ω–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è '{escape_markdown_v2(city_input)}'...", parse_mode=None)
        weather_report = await weather.get_weather(city_input)

        if weather_report:
            final_parse_mode: Optional[str] = "MarkdownV2"
            error_keywords = ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "–æ—à–∏–±–∫–∞", "—Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ç–∞–π–º–∞—É—Ç", "invalid", "not found"]
            if any(keyword.lower() in weather_report.lower() for keyword in error_keywords):
                final_parse_mode = None

            try:
                await bot.edit_message_text(weather_report,
                                            chat_id=processing_msg.chat.id,
                                            message_id=processing_msg.message_id,
                                            parse_mode=final_parse_mode,
                                            disable_web_page_preview=True)
            except TelegramBadRequest as e:
                 if "message is not modified" in str(e): logger.debug(f"Weather report for {city_input} was not modified.")
                 else:
                     logger.error(f"Error editing weather message (parse_mode={final_parse_mode}): {e}. Report: '{weather_report[:200]}...'")
                     try:
                         await bot.edit_message_text(weather_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None, disable_web_page_preview=True)
                     except Exception as fallback_edit_err:
                          logger.error(f"Failed to edit weather message even without parse_mode: {fallback_edit_err}")
                          await message.reply(weather_report, parse_mode=None, disable_web_page_preview=True)
                          try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                          except Exception: pass
            except Exception as e:
                 logger.error(f"Unexpected error sending weather message: {e}")
                 await message.reply(weather_report, parse_mode=final_parse_mode, disable_web_page_preview=True)
                 try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                 except Exception: pass
        else:
            await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)

        return # <-- –í–ê–ñ–ù–û: –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å

    # --- –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Gemini ---
    else:
        logger.info(f"Received text message from user {user_id} for Gemini: '{user_text[:100]}...'")
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        await database.add_message(user_id, 'user', user_text)
        response_text = await gemini.generate_text_response(user_id, user_text)

        if response_text:
            # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ä TTS ---
            tts_marker_start = "[TTS:"
            tts_marker_end = "]"
            if response_text.startswith(tts_marker_start) and response_text.endswith(tts_marker_end):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏
                text_to_speak = response_text[len(tts_marker_start):-len(tts_marker_end)]
                if text_to_speak:
                    logger.info(f"Detected explicit TTS request from Gemini for user {user_id}. Text: '{text_to_speak[:50]}...'")
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –≤ –ë–î (–Ω–µ —Å–∞–º –º–∞—Ä–∫–µ—Ä)
                    await database.add_message(user_id, 'model', f"[–ó–∞–ø—Ä–æ—à–µ–Ω–∞ –æ–∑–≤—É—á–∫–∞ —Ç–µ–∫—Å—Ç–∞: '{text_to_speak[:100]}...']")
                    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–∑–≤—É—á–∫—É –Ω–∞–ø—Ä—è–º—É—é
                    await tts.speak_and_cleanup(bot, message.chat.id, text_to_speak)
                else:
                    logger.warning(f"Gemini returned TTS marker but text was empty for user {user_id}")
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç
                    await message.reply("–ù–µ –º–æ–≥—É –æ–∑–≤—É—á–∏—Ç—å –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.", parse_mode=None)
                    await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞: Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∫–∏]")

            # --- –°–¢–ê–†–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ TTS –º–∞—Ä–∫–µ—Ä ---
            else:
                # –≠—Ç–æ –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ –æ—Ç–≤–µ—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –æ—Ç Gemini
                await database.add_message(user_id, 'model', response_text)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç /toggle_speak)
                await send_response(bot, message.chat.id, user_id, response_text)
            # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Gemini (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            logger.error(f"Failed to generate Gemini response for user {user_id}")
            error_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.reply(error_response, parse_mode=None)
            await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI]")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def send_response(bot: Bot, chat_id: int, user_id: int, text: str, parse_mode: Optional[str] = None):
    """Sends response as text or voice based on user settings, handling long messages and errors."""
    text_to_send = text
    speak_enabled = False

    try:
        speak_enabled = await database.get_speak_enabled(user_id)

        if speak_enabled:
            logger.info(f"Sending voice response to user {user_id}")
            await tts.speak_and_cleanup(bot, chat_id, text)
        else:
            logger.info(f"Sending text response to user {user_id} with parse_mode={parse_mode}")
            max_len = 4096
            if len(text_to_send) <= max_len:
                 await bot.send_message(chat_id, text_to_send, parse_mode=parse_mode, disable_web_page_preview=True)
            else:
                 logger.warning(f"Response for user {user_id} is too long ({len(text_to_send)} chars). Sending in parts.")
                 parts = []
                 current_part = ""
                 lines = text_to_send.split('\n')
                 for i, line in enumerate(lines):
                     if len(current_part) + len(line) + 1 <= max_len:
                         current_part += line + "\n"
                     else:
                         if current_part:
                             parts.append(current_part.strip())
                         if len(line) > max_len:
                             for j in range(0, len(line), max_len):
                                 chunk = line[j:j+max_len]
                                 if chunk: parts.append(chunk)
                             current_part = ""
                         else:
                             current_part = line + "\n"
                 if current_part.strip():
                     parts.append(current_part.strip())

                 for i, part in enumerate(parts):
                     if not part: continue
                     logger.debug(f"Sending part {i+1}/{len(parts)} ({len(part)} chars) to chat {chat_id}")
                     await bot.send_message(chat_id, part, parse_mode=parse_mode, disable_web_page_preview=True)
                     if i < len(parts) - 1:
                         await asyncio.sleep(0.8)

    except TelegramBadRequest as e:
         logger.error(f"Telegram API error sending response to user {user_id} (chat {chat_id}) with parse_mode={parse_mode}: {e}")
         if parse_mode:
             logger.warning(f"Retrying to send message to {user_id} without parse_mode.")
             try:
                 await send_response(bot, chat_id, user_id, text, parse_mode=None)
                 logger.info("Successfully sent response without formatting as fallback.")
             except Exception as fallback_e:
                  logger.error(f"Failed to send fallback unformatted message to chat {chat_id}: {fallback_e}")
         else:
             logger.error(f"Failed to send message/voice to chat {chat_id}. Error: {e}")
             if not speak_enabled:
                try: await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.", parse_mode=None)
                except Exception: pass

    except Exception as e:
        logger.error(f"General error sending response to user {user_id} (chat {chat_id}): {e}")
        logger.exception(e)
        if not speak_enabled:
            try: await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.", parse_mode=None)
            except Exception: pass

# --- END OF FILE bot/handlers.py ---