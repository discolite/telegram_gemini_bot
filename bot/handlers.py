import asyncio
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile, InputFile
from aiogram.fsm.context import FSMContext # –ï—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è FSM
from loguru import logger

from config import settings
from services import (
    gemini,
    weather,
    speech,
    image_analyzer,
    file_handler,
    database,
    tts,
    translator,
)
from utils.helpers import get_temp_filepath, cleanup_temp_file, escape_markdown_v2
from .keyboards import get_mood_keyboard

# –°–æ–∑–¥–∞–µ–º Router
router = Router()

# --- Command Handlers ---

@router.message(Command("start", "help"))
async def handle_start(message: Message):
    """Handles /start and /help commands."""
    user_name = message.from_user.full_name
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –ø–∏—Å–∞–ª)
    await database.get_user_settings(message.from_user.id)
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
        "–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI-–±–æ—Ç. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üß† **–û–±—â–µ–Ω–∏–µ:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é Google Gemini, —É—á–∏—Ç—ã–≤–∞—è –∫–æ–Ω—Ç–µ–∫—Å—Ç.\n"
        "üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:** –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É.\n"
        "üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —è –∏–∑–≤–ª–µ–∫—É —Ç–µ–∫—Å—Ç (OCR) –∏ –æ–ø–∏—à—É –µ—ë (Gemini Vision).\n"
        "üìÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:** –û—Ç–ø—Ä–∞–≤—å .txt, .pdf, .csv –∏–ª–∏ .xlsx, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n"
        "‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞:** `/weather <–≥–æ—Ä–æ–¥>` (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞).\n"
        "üé≠ **–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:** `/mood` - –≤—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å (–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ., —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π).\n"
        "üîä **–û–∑–≤—É—á–∫–∞:** \n"
        "   - `/speak <—Ç–µ–∫—Å—Ç>` - –æ–∑–≤—É—á—É —Ç–≤–æ–π —Ç–µ–∫—Å—Ç.\n"
        "   - `/toggle_speak` - –≤–∫–ª/–≤—ã–∫–ª –æ–∑–≤—É—á–∫—É –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤.\n"
        "üåê **–ü–µ—Ä–µ–≤–æ–¥:** `/translate <—Ç–µ–∫—Å—Ç> [—è–∑—ã–∫]` (–Ω–∞–ø—Ä., `/translate hello ru`). –Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ Gemini (–ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è).\n\n"
        f"–¢–≤–æ–π ID: `{message.from_user.id}`\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
    )
    await message.answer(help_text, parse_mode="MarkdownV2")

@router.message(Command("weather"))
async def handle_weather(message: Message, command: CommandObject, bot: Bot):
    """Handles /weather command."""
    city = command.args if command.args else "Moscow"
    logger.info(f"User {message.from_user.id} requested weather for '{city}'")
    processing_msg = await message.answer(f"–£–∑–Ω–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è '{city}'...")

    weather_report = await weather.get_weather(city)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–≥–æ–¥—ã
    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å–∞–º –æ—Ç—á–µ—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö Markdown —Å–∏–º–≤–æ–ª–æ–≤
    # –ù–æ –¥–ª—è –ø–æ–≥–æ–¥—ã –æ–±—ã—á–Ω–æ —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å escape_markdown_v2() –µ—Å–ª–∏ –Ω—É–∂–Ω–æ.
    # formatted_report = escape_markdown_v2(weather_report) # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    formatted_report = weather_report # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –µ—Å—Ç—å, —Ç.–∫. —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –≤ get_weather

    await bot.edit_message_text(formatted_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode="MarkdownV2") # –ò–ª–∏ HTML –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–Ω

@router.message(Command("mood"))
async def handle_mood(message: Message):
    """Handles /mood command, shows mood selection keyboard."""
    user_id = message.from_user.id
    settings_data = await database.get_user_settings(user_id)
    current_mood = settings_data.get('mood', settings.DEFAULT_MOOD)
    await message.answer(
        f"–í—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è. –¢–µ–∫—É—â–∏–π: `{current_mood}`",
        reply_markup=get_mood_keyboard(),
        parse_mode="MarkdownV2"
    )

@router.message(Command("speak"))
async def handle_speak(message: Message, command: CommandObject, bot: Bot):
    """Handles /speak command for TTS."""
    text_to_speak = command.args
    if not text_to_speak:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /speak.")
        return

    user_id = message.from_user.id
    logger.info(f"User {user_id} requested to speak: '{text_to_speak[:50]}...'")
    processing_msg = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ...")

    audio_path = await tts.generate_speech(text_to_speak)

    if audio_path:
        try:
            audio_input = FSInputFile(audio_path)
            await message.reply_voice(voice=audio_input)
            await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
            logger.info(f"Sent generated voice message for /speak to {user_id}")
        except Exception as send_err:
            logger.error(f"Error sending voice message for /speak to {user_id}: {send_err}")
            await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        finally:
            await cleanup_temp_file(audio_path)
    else:
        logger.error(f"Failed to generate speech for /speak for user {user_id}")
        await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)

@router.message(Command("toggle_speak"))
async def handle_toggle_speak(message: Message):
    """Handles /toggle_speak command."""
    user_id = message.from_user.id
    new_state = await database.toggle_speak_mode(user_id)
    state_text = "–í–ö–õ–Æ–ß–ï–ù–ê" if new_state else "–í–´–ö–õ–Æ–ß–ï–ù–ê"
    logger.info(f"User {user_id} toggled speak mode to {state_text}")
    await message.answer(f"üîä –û–∑–≤—É—á–∫–∞ –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å **{state_text}**.", parse_mode="MarkdownV2")

@router.message(Command("translate"))
async def handle_translate(message: Message, command: CommandObject, bot: Bot):
    """Handles /translate command."""
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/translate <—Ç–µ–∫—Å—Ç> [–∫–æ–¥_—è–∑—ã–∫–∞]`\n–ü—Ä–∏–º–µ—Ä: `/translate –ü—Ä–∏–≤–µ—Ç –º–∏—Ä en`", parse_mode="MarkdownV2")
        return

    args_list = command.args.split()
    if len(args_list) < 2:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é,
        # –∏–ª–∏ –ø—Ä–æ—Å–∏–º —É–∫–∞–∑–∞—Ç—å —è–≤–Ω–æ
        # await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, en, fr, de).")
        # return
        text_to_translate = command.args
        target_lang = 'en' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        await message.answer(f"–Ø–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–µ—Ä–µ–≤–æ–∂—É –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π (`en`).")

    else:
        target_lang_input = args_list[-1]
        text_to_translate = " ".join(args_list[:-1])
        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —è–∑—ã–∫–∞ (ru, en, fr...)
        target_lang = translator.get_lang_code(target_lang_input)
        logger.info(f"User {message.from_user.id} requested translation to '{target_lang}'. Original lang input: '{target_lang_input}'")

    processing_msg = await message.answer(f"–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —è–∑—ã–∫ '{target_lang}'...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º googletrans —Å fallback –Ω–∞ Gemini
    translated_text = await translator.translate_text_googletrans(text_to_translate, target_lang)

    if translated_text:
        response_text = f"**–û—Ä–∏–≥–∏–Ω–∞–ª:**\n{escape_markdown_v2(text_to_translate)}\n\n" \
                        f"**–ü–µ—Ä–µ–≤–æ–¥ ({target_lang}):**\n{escape_markdown_v2(translated_text)}"
        await bot.edit_message_text(response_text, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode="MarkdownV2")
    else:
        logger.error(f"Translation failed for user {message.from_user.id}")
        await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)


# --- Callback Query Handlers ---

@router.callback_query(F.data.startswith("set_mood:"))
async def process_mood_callback(callback_query: CallbackQuery, bot: Bot):
    """Handles mood selection callbacks."""
    mood = callback_query.data.split(":")[1]
    user_id = callback_query.from_user.id

    await database.update_user_mood(user_id, mood)
    logger.info(f"User {user_id} set mood to {mood}")

    await callback_query.answer(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mood}")
    try:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await bot.edit_message_text(
            f"‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{mood}`",
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            reply_markup=None, # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            parse_mode="MarkdownV2"
        )
    except Exception as e:
         logger.error(f"Failed to edit mood message: {e}") # –û—à–∏–±–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–µ


# --- Message Handlers (Order Matters!) ---

# 1. Voice messages
@router.message(F.voice)
async def handle_voice_message(message: Message, bot: Bot):
    """Handles voice messages."""
    user_id = message.from_user.id
    logger.info(f"Received voice message from user {user_id}")
    processing_msg = await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º OGG —Ñ–∞–π–ª
    ogg_filepath = get_temp_filepath("ogg")
    try:
        await bot.download(message.voice, destination=ogg_filepath)
        logger.debug(f"Voice message saved to {ogg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download voice message from {user_id}: {e}")
        await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        await cleanup_temp_file(ogg_filepath) # –û—á–∏—Å—Ç–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π —á–∞—Å—Ç–∏—á–Ω–æ–≥–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        return

    # 2. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ (–∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏ –æ—á–∏—Å—Ç–∫–∞ –≤–Ω—É—Ç—Ä–∏)
    await bot.edit_message_text("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
    recognized_text = await speech.recognize_speech(ogg_filepath) # –ü—É—Ç—å –∫ ogg, –æ—á–∏—Å—Ç–∫–∞ –≤–Ω—É—Ç—Ä–∏ recognize_speech

    if recognized_text:
        logger.info(f"User {user_id} voice recognized as: '{recognized_text}'")
        await bot.edit_message_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{escape_markdown_v2(recognized_text)}\"\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode="MarkdownV2")

        # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        await database.add_message(user_id, 'user', recognized_text)
        response_text = await gemini.generate_text_response(user_id, recognized_text)

        if response_text:
            await database.add_message(user_id, 'model', response_text)
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
            await send_response(bot, message.chat.id, user_id, response_text)
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
            await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        else:
            await bot.edit_message_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{escape_markdown_v2(recognized_text)}\"\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode="MarkdownV2")

    else:
        logger.warning(f"Could not recognize speech from user {user_id}")
        await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)


# 2. Photo messages
@router.message(F.photo)
async def handle_photo_message(message: Message, bot: Bot):
    """Handles photo messages."""
    user_id = message.from_user.id
    logger.info(f"Received photo from user {user_id}")
    processing_msg = await message.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ (–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
    photo = message.photo[-1] # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç - —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    jpg_filepath = get_temp_filepath("jpg")
    try:
        await bot.download(photo, destination=jpg_filepath)
        logger.debug(f"Photo saved to {jpg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download photo from {user_id}: {e}")
        await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        await cleanup_temp_file(jpg_filepath)
        return

    # 2. –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OCR + Vision) –∏ –æ—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä–∏
    analysis_result = await image_analyzer.analyze_image(jpg_filepath, user_id)
    ocr_text = analysis_result.get("ocr_text")
    vision_analysis = analysis_result.get("vision_analysis")

    await bot.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)

    # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    combined_info = ""
    response_prefix = "" # –ù–∞—á–∞–ª–æ –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞

    if ocr_text is not None: # OCR –º–æ–≥ –≤–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if ocr_text:
            response_prefix += f"**–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç (OCR):**\n```\n{escape_markdown_v2(ocr_text)}\n```\n\n"
            combined_info += f"–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω —Ç–µ–∫—Å—Ç: '{ocr_text}'. "
        else: # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ - —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
             response_prefix += "*–¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω (OCR).*\n\n"
             combined_info += "–¢–µ–∫—Å—Ç –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. "
    else: # None - –±—ã–ª–∞ –æ—à–∏–±–∫–∞ OCR
        response_prefix += "*–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ (OCR).*\n\n"
        # combined_info += "–û—à–∏–±–∫–∞ OCR. " # –ú–æ–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –≤ combined_info

    if vision_analysis:
        response_prefix += f"**–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Gemini Vision):**\n{escape_markdown_v2(vision_analysis)}\n\n"
        combined_info += f"–û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: '{vision_analysis}'"
    else:
         response_prefix += "*–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (Gemini Vision).*\n\n"
         # combined_info += "–û—à–∏–±–∫–∞ Vision." # –ú–æ–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∏ OCR, –Ω–∏ Vision
    if not ocr_text and not vision_analysis:
         await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
         return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–Ω–∞–ª–∏–∑–µ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    # –≠—Ç–æ –Ω–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç Gemini "–∑–Ω–∞—Ç—å", —á—Ç–æ –º—ã –æ–±—Å—É–∂–¥–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    analysis_summary_for_history = f"[–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è] OCR: {ocr_text if ocr_text else '–ù–µ—Ç/–û—à–∏–±–∫–∞'}. Vision: {vision_analysis if vision_analysis else '–ù–µ—Ç/–û—à–∏–±–∫–∞'}."
    await database.add_message(user_id, 'user', analysis_summary_for_history)

    # 4. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç Gemini (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å –ø—Ä–æ—Å—å–±–æ–π –ø—Ä–æ–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑)
    # user_followup_prompt = "–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ–± —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∏ —Ç–µ–∫—Å—Ç–µ –Ω–∞ –Ω–µ–º?" # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º combined_info –∫–∞–∫ –ø—Ä–æ–º–ø—Ç
    # response_text = await gemini.generate_text_response(user_id, user_followup_prompt)

    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
    response_text = response_prefix.strip() # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    await database.add_message(user_id, 'model', response_text) # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∞–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏

    # 5. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
    await send_response(bot, message.chat.id, user_id, response_text, parse_mode="MarkdownV2") # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."
    await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)


# 3. Document messages
@router.message(F.document)
async def handle_document_message(message: Message, bot: Bot):
    """Handles document messages."""
    user_id = message.from_user.id
    doc = message.document
    filename = doc.file_name or "unknown_file"
    mime_type = doc.mime_type
    file_size = doc.file_size or 0

    logger.info(f"Received document '{filename}' from user {user_id} (Type: {mime_type}, Size: {file_size})")
    processing_msg = await message.reply(f"–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{filename}'. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...")

    # 1. –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    doc_filepath = settings.TEMP_DIR / f"{doc.file_id}_{filename}" # –ò—Å–ø–æ–ª—å–∑—É–µ–º file_id –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
    try:
        await bot.download(doc, destination=doc_filepath)
        logger.debug(f"Document saved to {doc_filepath}")
    except Exception as e:
        logger.error(f"Failed to download document '{filename}' from {user_id}: {e}")
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filename}'.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        await cleanup_temp_file(doc_filepath)
        return

    # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞, –∞–Ω–∞–ª–∏–∑ –∏ –æ—á–∏—Å—Ç–∫–∞ (–≤—Å–µ –≤–Ω—É—Ç—Ä–∏ file_handler.process_file)
    await bot.edit_message_text(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{filename}'...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
    process_result = await file_handler.process_file(doc_filepath, filename, mime_type, file_size)

    # process_result —ç—Ç–æ tuple: (status_message, analysis_result) –∏–ª–∏ None

    if process_result:
        status_message, analysis_result = process_result

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_text = f"**–§–∞–π–ª:** `{escape_markdown_v2(filename)}`\n"
        response_text += f"**–°—Ç–∞—Ç—É—Å:** {escape_markdown_v2(status_message)}\n\n"

        if analysis_result:
            response_text += f"**–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (Gemini):**\n{escape_markdown_v2(analysis_result)}"
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –∫–∞–∫ –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
            await database.add_message(user_id, 'model', f"[–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {filename}]: {analysis_result}")
        else:
             # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, –Ω–æ —Ñ–∞–π–ª –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∏–ª–∏ –æ—à–∏–±–∫–∞ Gemini)
             # status_message —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —ç—Ç–æ–º
             # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É—Ç–æ—á–Ω–µ–Ω–∏–µ
             if "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑" in status_message or "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ" in status_message:
                  response_text += "_–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç AI._"
             # –ï—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, status_message —É–∂–µ —ç—Ç–æ —Å–∫–∞–∂–µ—Ç

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
        await send_response(bot, message.chat.id, user_id, response_text, parse_mode="MarkdownV2")
        await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)

    else:
        # –°—é–¥–∞ –ø–æ–ø–∞–¥–∞–µ–º, –µ—Å–ª–∏ process_file –≤–µ—Ä–Ω—É–ª None (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞)
        logger.error(f"File processing failed unexpectedly for '{filename}' user {user_id}")
        await bot.edit_message_text(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–∞–π–ª '{filename}'.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)


# 4. Text messages (should be last message handler)
@router.message(F.text)
async def handle_text_message(message: Message, bot: Bot):
    """Handles regular text messages."""
    user_id = message.from_user.id
    user_text = message.text
    logger.info(f"Received text message from user {user_id}: '{user_text[:100]}...'")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await bot.send_chat_action(chat_id=message.chat.id, action="typing")

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    await database.add_message(user_id, 'user', user_text)

    # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é Gemini
    response_text = await gemini.generate_text_response(user_id, user_text)

    if response_text:
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
        await database.add_message(user_id, 'model', response_text)
        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç –∏–ª–∏ –≥–æ–ª–æ—Å)
        await send_response(bot, message.chat.id, user_id, response_text)
    else:
        logger.error(f"Failed to generate Gemini response for user {user_id}")
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# --- Helper Function for Sending Responses ---

async def send_response(bot: Bot, chat_id: int, user_id: int, text: str, parse_mode: Optional[str] = None):
    """Sends response as text or voice based on user settings."""
    try:
        speak_enabled = await database.get_speak_enabled(user_id)
        if speak_enabled:
            logger.info(f"Sending voice response to user {user_id}")
            await tts.speak_and_cleanup(bot, chat_id, text) # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç, —É–¥–∞–ª—è–µ—Ç mp3
        else:
            logger.info(f"Sending text response to user {user_id}")
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è Telegram
            max_len = 4096
            if len(text) <= max_len:
                 await bot.send_message(chat_id, text, parse_mode=parse_mode, disable_web_page_preview=True)
            else:
                 logger.warning(f"Response for user {user_id} is too long ({len(text)} chars). Sending in parts.")
                 # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                 for i in range(0, len(text), max_len):
                     part = text[i:i + max_len]
                     await bot.send_message(chat_id, part, parse_mode=parse_mode, disable_web_page_preview=True)
                     await asyncio.sleep(0.5) # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏

    except Exception as e:
        logger.error(f"Error sending response to user {user_id} (chat {chat_id}): {e}")
        logger.exception(e)
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        try:
            await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")
        except Exception as fallback_e:
            logger.error(f"Failed to send fallback error message to {chat_id}: {fallback_e}")