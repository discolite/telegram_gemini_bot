# --- START OF FILE bot/handlers.py ---

import asyncio
import os
from aiogram import Router, F, Bot
from aiogram.filters import Command, CommandObject
from aiogram.types import Message, CallbackQuery, FSInputFile, InputFile, User
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
from loguru import logger
from typing import Optional, Dict
from pathlib import Path

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
from config import settings
from services import (
    gemini,
    weather,
    speech,
    image_analyzer, # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
    file_handler,   # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    database,
    tts,
    translator,
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ö–µ–ª–ø–µ—Ä—ã
from utils.helpers import (
    get_temp_filepath,
    cleanup_temp_file,
    escape_markdown_v2,
    is_ocr_potentially_useful # –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è, —Ç.–∫. OCR –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ª–æ–≥–æ–≤/–∏—Å—Ç–æ—Ä–∏–∏
)
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from .keyboards import get_mood_keyboard

router = Router()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id ---
def get_user_id(message: Optional[Message] = None, callback_query: Optional[CallbackQuery] = None) -> Optional[int]:
    """Safely extracts user_id from Message or CallbackQuery."""
    user: Optional[User] = None
    if message and message.from_user: user = message.from_user
    elif callback_query and callback_query.from_user: user = callback_query.from_user
    if user: return user.id
    logger.warning("Could not extract user_id from event.")
    return None

# --- Command Handlers ---

@router.message(Command("start", "help"))
async def handle_start(message: Message):
    """Handles /start and /help commands."""
    user_id = get_user_id(message=message)
    if not user_id: return
    user_name = message.from_user.full_name if message.from_user else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await database.get_user_settings(user_id) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    help_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {escape_markdown_v2(user_name)}\!\n\n"
        "–Ø –º–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π AI\-–±–æ—Ç\. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n\n"
        "üß† **–û–±—â–µ–Ω–∏–µ:** –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é Google Gemini\. –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –ø–æ–≥–æ–¥—É, –Ω–∞–ø–∏—Å–∞–≤ `–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥>`\.\n" # –û–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç
        "üó£Ô∏è **–ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:** –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ, —è –µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—é –∏ –æ—Ç–≤–µ—á—É\.\n"
        "üñºÔ∏è **–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:** –û—Ç–ø—Ä–∞–≤—å –∫–∞—Ä—Ç–∏–Ω–∫—É, —è –æ–ø–∏—à—É –µ—ë —Å –ø–æ–º–æ—â—å—é Gemini Vision \(—Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è\)\.\n"
        "üìÑ **–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤:** –û—Ç–ø—Ä–∞–≤—å \.txt, \.pdf, \.csv, \.xlsx –∏–ª–∏ \.docx, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ\.\n"
        "‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞ (–∫–æ–º–∞–Ω–¥–∞):** `/weather <–≥–æ—Ä–æ–¥>` \(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ú–æ—Å–∫–≤–∞\)\.\n"
        "üé≠ **–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è:** `/mood` \- –≤—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å \(–¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, –ø—Ä–æ—Ñ\., —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π\)\.\n"
        "üîä **–û–∑–≤—É—á–∫–∞:** \n"
        "   \- `/speak <—Ç–µ–∫—Å—Ç>` \- –æ–∑–≤—É—á—É —Ç–≤–æ–π —Ç–µ–∫—Å—Ç\.\n"
        "   \- `/toggle_speak` \- –≤–∫–ª/–≤—ã–∫–ª –æ–∑–≤—É—á–∫—É –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤\.\n"
        "üåê **–ü–µ—Ä–µ–≤–æ–¥:** `/translate <—Ç–µ–∫—Å—Ç> [—è–∑—ã–∫]` \(–Ω–∞–ø—Ä\., `/translate hello ru`\)\. –Ø —Ç–∞–∫–∂–µ –º–æ–≥—É –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ Gemini \(–ø–æ–ø—Ä–æ—Å–∏ –º–µ–Ω—è\)\.\n\n"
        f"–¢–≤–æ–π ID: `{user_id}`\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\."
    )
    await message.answer(help_text, parse_mode="MarkdownV2")

@router.message(Command("weather"))
async def handle_weather(message: Message, command: CommandObject, bot: Bot):
    """Handles /weather command."""
    user_id = get_user_id(message=message)
    if not user_id: return
    city_input = command.args if command.args else "Moscow"
    logger.info(f"User {user_id} requested weather for '{city_input}' using /weather command")
    processing_msg = await message.answer(f"–£–∑–Ω–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è '{escape_markdown_v2(city_input)}'...", parse_mode=None)
    weather_report = await weather.get_weather(city_input)
    if weather_report:
        final_parse_mode: Optional[str] = "MarkdownV2"
        error_keywords = ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "–æ—à–∏–±–∫–∞", "—Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ç–∞–π–º–∞—É—Ç", "invalid", "not found"]
        if any(keyword.lower() in weather_report.lower() for keyword in error_keywords):
            final_parse_mode = None

        try:
            await bot.edit_message_text(weather_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=final_parse_mode, disable_web_page_preview=True)
        except TelegramBadRequest as e:
             if "message is not modified" in str(e): logger.debug(f"Weather report for {city_input} was not modified.")
             else:
                 logger.error(f"Error editing weather message (parse_mode={final_parse_mode}): {e}. Report: '{weather_report[:200]}...'")
                 try:
                     await bot.edit_message_text(weather_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None, disable_web_page_preview=True)
                 except Exception as fallback_edit_err:
                      logger.error(f"Failed to edit weather message even without parse_mode: {fallback_edit_err}")
                      await message.answer(weather_report, parse_mode=None, disable_web_page_preview=True)
        except Exception as e:
             logger.error(f"Unexpected error editing weather message: {e}")
             await message.answer(weather_report, parse_mode=final_parse_mode, disable_web_page_preview=True)
             try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
             except Exception: pass
    else:
        await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)

@router.message(Command("mood"))
async def handle_mood(message: Message):
    """Handles /mood command, shows mood selection keyboard."""
    user_id = get_user_id(message=message)
    if not user_id: return
    settings_data = await database.get_user_settings(user_id)
    current_mood = settings_data.get('mood', settings.DEFAULT_MOOD)
    await message.answer(f"–í—ã–±–µ—Ä–∏ –º–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è\. –¢–µ–∫—É—â–∏–π: `{escape_markdown_v2(current_mood)}`", reply_markup=get_mood_keyboard(), parse_mode="MarkdownV2")

@router.message(Command("speak"))
async def handle_speak(message: Message, command: CommandObject, bot: Bot):
    """Handles /speak command for TTS."""
    user_id = get_user_id(message=message)
    if not user_id: return
    text_to_speak = command.args
    if not text_to_speak:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã `/speak`\.", parse_mode="MarkdownV2")
        return

    logger.info(f"User {user_id} requested to speak: '{text_to_speak[:50]}...'")
    processing_msg = await message.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ...", parse_mode=None)
    audio_path: Optional[Path] = None
    try:
        audio_path = await tts.generate_speech(text_to_speak)
        if audio_path:
            audio_input = FSInputFile(audio_path)
            await message.reply_voice(voice=audio_input)
            try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
            except TelegramBadRequest as del_e: logger.warning(f"Could not delete 'generating audio' message: {del_e}")
            logger.info(f"Sent generated voice message for /speak to {user_id}")
        else:
            logger.error(f"Failed to generate speech for /speak for user {user_id}")
            await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
    except Exception as send_err:
        logger.error(f"Error handling /speak for user {user_id}: {send_err}")
        await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
    finally:
        if audio_path:
            await cleanup_temp_file(audio_path)

@router.message(Command("toggle_speak"))
async def handle_toggle_speak(message: Message):
    """Handles /toggle_speak command."""
    user_id = get_user_id(message=message)
    if not user_id: return
    new_state = await database.toggle_speak_mode(user_id)
    state_text = "–í–ö–õ–Æ–ß–ï–ù–ê" if new_state else "–í–´–ö–õ–Æ–ß–ï–ù–ê"
    logger.info(f"User {user_id} toggled speak mode to {state_text}")
    await message.answer(f"üîä –û–∑–≤—É—á–∫–∞ –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç–µ–ø–µ—Ä—å **{state_text}**\.", parse_mode="MarkdownV2")

@router.message(Command("translate"))
async def handle_translate(message: Message, command: CommandObject, bot: Bot):
    """Handles /translate command."""
    user_id = get_user_id(message=message)
    if not user_id: return
    if not command.args:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/translate <—Ç–µ–∫—Å—Ç> [–∫–æ–¥\_—è–∑—ã–∫–∞]`\n–ü—Ä–∏–º–µ—Ä: `/translate –ü—Ä–∏–≤–µ—Ç –º–∏—Ä en`", parse_mode="MarkdownV2")
        return

    args_list = command.args.split()
    target_lang = 'ru' # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    text_to_translate = ""
    notification_message = None

    if len(args_list) >= 2:
        potential_lang = args_list[-1].lower()
        lang_code = translator.get_lang_code(potential_lang)
        if lang_code and (len(potential_lang) <= 3 or lang_code != potential_lang):
            target_lang = lang_code
            text_to_translate = " ".join(args_list[:-1])
            logger.info(f"User {user_id} requested translation to '{target_lang}'. Original lang input: '{potential_lang}'. Text: '{text_to_translate[:50]}...'")
        else:
            text_to_translate = command.args
            notification_message = f"–ö–æ–¥ —è–∑—ã–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π ('ru')"
            logger.info(f"User {user_id} requested translation (defaulting to 'ru'). Text: '{text_to_translate[:50]}...'")
    else:
         text_to_translate = command.args
         notification_message = f"–ö–æ–¥ —è–∑—ã–∫–∞ –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π ('ru')"
         logger.info(f"User {user_id} requested translation (defaulting to 'ru'). Text: '{text_to_translate[:50]}...'")

    if not text_to_translate:
         await message.answer("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", parse_mode=None)
         return

    if notification_message:
        await message.answer(notification_message, parse_mode=None)

    processing_msg = await message.answer(f"–ü–µ—Ä–µ–≤–æ–∂—É –Ω–∞ —è–∑—ã–∫ '{target_lang}'...", parse_mode=None)
    translated_text = await translator.translate_text_googletrans(text_to_translate, target_lang)

    if translated_text and "–æ—à–∏–±–∫–∞" not in translated_text.lower() and "error" not in translated_text.lower():
        response_text = (f"**–û—Ä–∏–≥–∏–Ω–∞–ª:**\n{escape_markdown_v2(text_to_translate)}\n\n"
                         f"**–ü–µ—Ä–µ–≤–æ–¥ ({target_lang}):**\n{escape_markdown_v2(translated_text)}")
        try:
            await bot.edit_message_text(response_text, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode="MarkdownV2")
        except TelegramBadRequest as e:
             if "message is not modified" not in str(e):
                 logger.error(f"Error editing translation message (MarkdownV2): {e}")
                 try:
                     fallback_text = f"–û—Ä–∏–≥–∏–Ω–∞–ª:\n{text_to_translate}\n\n–ü–µ—Ä–µ–≤–æ–¥ ({target_lang}):\n{translated_text}"
                     await bot.edit_message_text(fallback_text, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
                 except Exception as fallback_edit_err:
                     logger.error(f"Failed to edit translation fallback: {fallback_edit_err}")
                     await message.answer(response_text, parse_mode="MarkdownV2")
        except Exception as e:
             logger.error(f"Unexpected error editing translation message: {e}")
             await message.answer(response_text, parse_mode="MarkdownV2")
             try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
             except Exception: pass
    else:
        logger.error(f"Translation failed for user {user_id}. Fallback response: {translated_text}")
        fail_message = translated_text if translated_text else "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥."
        await bot.edit_message_text(fail_message, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)

# --- Callback Query Handlers ---

@router.callback_query(F.data.startswith("set_mood:"))
async def process_mood_callback(callback_query: CallbackQuery, bot: Bot):
    """Handles mood selection callbacks."""
    user_id = get_user_id(callback_query=callback_query)
    if not user_id:
        await callback_query.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    mood = callback_query.data.split(":")[1]
    await database.update_user_mood(user_id, mood)
    logger.info(f"User {user_id} set mood to {mood}")
    await callback_query.answer(f"–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {mood}")
    try:
        await bot.edit_message_text(f"‚úÖ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: `{escape_markdown_v2(mood)}`",
                                    chat_id=callback_query.message.chat.id,
                                    message_id=callback_query.message.message_id,
                                    reply_markup=None,
                                    parse_mode="MarkdownV2")
    except TelegramBadRequest as e: logger.warning(f"Failed to edit mood message (might be old or unchanged): {e}")
    except Exception as e: logger.error(f"Unexpected error editing mood message: {e}")

# --- Message Handlers ---

@router.message(F.voice)
async def handle_voice_message(message: Message, bot: Bot):
    """Handles voice messages."""
    user_id = get_user_id(message=message)
    if not user_id: return
    logger.debug(f"Entered handle_voice_message for user {user_id}")
    logger.info(f"Received voice message from user {user_id} (duration: {message.voice.duration}s)")
    processing_msg = await message.reply("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...", parse_mode=None)

    ogg_filepath = get_temp_filepath("ogg")
    try:
        await bot.download(message.voice, destination=str(ogg_filepath))
        logger.debug(f"Voice message saved to {ogg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download voice message from {user_id}: {e}")
        await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await cleanup_temp_file(ogg_filepath)
        return

    try:
        await bot.edit_message_text("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
    except TelegramBadRequest: pass

    recognized_text = await speech.recognize_speech(ogg_filepath) # recognize_speech handles cleanup

    if recognized_text is not None:
        logger.info(f"User {user_id} voice recognized as: '{recognized_text}'")
        try:
            await bot.edit_message_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{escape_markdown_v2(recognized_text)}\"\n\n–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç\.\.\.",
                                        chat_id=processing_msg.chat.id,
                                        message_id=processing_msg.message_id,
                                        parse_mode="MarkdownV2")
        except TelegramBadRequest as e:
            if "message is not modified" not in str(e): logger.error(f"Error editing recognized text message: {e}")

        await database.add_message(user_id, 'user', recognized_text)
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        response_text = await gemini.generate_text_response(user_id, recognized_text)

        if response_text:
            await database.add_message(user_id, 'model', response_text)
            await send_response(bot, message.chat.id, user_id, response_text)
            try:
                await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
            except TelegramBadRequest as del_e: logger.warning(f"Could not delete processing message after voice reply: {del_e}")
            except Exception as del_e: logger.error(f"Unexpected error deleting processing message: {del_e}")
        else:
            logger.error(f"Failed to generate Gemini response for recognized voice from user {user_id}")
            try:
                await bot.edit_message_text(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: \"{escape_markdown_v2(recognized_text)}\"\n\n–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI\.",
                                            chat_id=processing_msg.chat.id,
                                            message_id=processing_msg.message_id,
                                            parse_mode="MarkdownV2")
            except TelegramBadRequest: pass
    else:
        logger.warning(f"Could not recognize speech from user {user_id} (recognize_speech returned None)")
        await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ –≤–∞—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –§–æ—Ç–æ ---
@router.message(F.photo)
async def handle_photo_message(message: Message, bot: Bot):
    """Handles photo messages, sending only Vision analysis to the user."""
    user_id = get_user_id(message=message)
    if not user_id: return
    photo_id = message.photo[-1].file_unique_id
    logger.info(f"Received photo '{photo_id}' from user {user_id}")
    processing_msg = await message.reply("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", parse_mode=None)

    photo = message.photo[-1]
    temp_filename = f"{user_id}_{photo.file_unique_id}.jpg"
    jpg_filepath = settings.TEMP_DIR / temp_filename

    try:
        await bot.download(photo, destination=str(jpg_filepath))
        logger.debug(f"Photo '{photo_id}' saved to {jpg_filepath}")
    except Exception as e:
        logger.error(f"Failed to download photo '{photo_id}' from {user_id}: {e}")
        await bot.edit_message_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await cleanup_temp_file(jpg_filepath)
        return

    analysis_result = await image_analyzer.analyze_image(jpg_filepath, user_id) # jpg_filepath —É–¥–∞–ª—è–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏
    ocr_text = analysis_result.get("ocr_text")
    vision_analysis = analysis_result.get("vision_analysis")

    response_parts = []
    analysis_summary_for_history = f"[–ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è '{photo_id}'] "

    if vision_analysis:
        escaped_vision_analysis = escape_markdown_v2(vision_analysis)
        response_parts.append(escaped_vision_analysis) # –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û Vision
        analysis_summary_for_history += f"Vision: '{vision_analysis[:100]}...'. "
        logger.info(f"Gemini Vision analysis received for photo '{photo_id}' user {user_id}.")
    else:
        response_parts.append("_–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è \(Gemini Vision\)\._")
        analysis_summary_for_history += "Vision: –û—à–∏–±–∫–∞/–ù–µ—Ç. "
        logger.warning(f"Gemini Vision analysis failed or returned empty for photo '{photo_id}' user {user_id}.")

    # –õ–æ–≥–∏—Ä—É–µ–º OCR, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ response_parts
    if ocr_text is not None and ocr_text != "":
        analysis_summary_for_history += f"OCR: '{ocr_text[:100]}...'. "
        logger.info(f"OCR text found (but not shown to user {user_id}) for photo '{photo_id}': length {len(ocr_text)}")
    elif ocr_text == "":
        analysis_summary_for_history += "OCR: –¢–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. "
        logger.debug(f"No text found (OCR) for photo '{photo_id}' user {user_id}.")
    else:
        analysis_summary_for_history += "OCR: –û—à–∏–±–∫–∞. "
        logger.warning(f"OCR returned None (error) for photo '{photo_id}' user {user_id}.")

    # –ó–∞–ø–∏—Å—å –≤ –ë–î
    await database.add_message(user_id, 'user', f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ '{photo_id}']")
    await database.add_message(user_id, 'model', analysis_summary_for_history.strip())

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
    final_response = "\n\n".join(response_parts).strip()
    parse_mode_final: Optional[str] = "MarkdownV2" # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º Markdown, —Ç.–∫. –µ—Å—Ç—å –∏–ª–∏ Vision –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ –∫—É—Ä—Å–∏–≤–µ

    try:
        await message.reply(final_response, parse_mode=parse_mode_final, disable_web_page_preview=True)
        logger.info(f"Successfully sent formatted image analysis response (Vision only) to user {user_id}")
        try:
            await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except Exception as del_err:
            logger.warning(f"Could not delete processing message after image reply: {del_err}")

    except TelegramBadRequest as e:
        logger.error(f"Telegram API error sending formatted analysis (parse_mode={parse_mode_final}): {e}. Response: {final_response[:200]}...")
        try:
            fallback_text = vision_analysis if vision_analysis else "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            await message.reply(fallback_text, parse_mode=None, disable_web_page_preview=True)
            logger.info(f"Successfully sent fallback unformatted analysis (Vision only) to user {user_id}")
            try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
            except Exception: pass
        except Exception as fallback_err:
             logger.error(f"Failed to send fallback unformatted analysis: {fallback_err}")
             try: await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", parse_mode=None)
             except Exception: pass
             try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
             except Exception: pass
    except Exception as e:
        logger.error(f"General error sending final image analysis response: {e}")
        logger.exception(e)
        try: await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—á–µ–Ω—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.", parse_mode=None)
        except Exception: pass
        try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except Exception: pass

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ ---
@router.message(F.document)
async def handle_document_message(message: Message, bot: Bot):
    """Handles document messages (txt, pdf, csv, xlsx, docx)."""
    user_id = get_user_id(message=message)
    if not user_id: return
    doc = message.document
    filename = doc.file_name if doc.file_name else f"file_{doc.file_unique_id}"
    mime_type = doc.mime_type
    file_size = doc.file_size if doc.file_size else 0
    file_id = doc.file_id

    logger.info(f"Received document '{filename}' from user {user_id} (Type: {mime_type}, Size: {file_size})")
    processing_msg = await message.reply(f"–ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{escape_markdown_v2(filename)}'. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é...", parse_mode=None)

    safe_filename_part = "".join(c if c.isalnum() or c in ('_', '-') else '_' for c in filename)
    temp_filename = f"{user_id}_{file_id}_{safe_filename_part}"; max_len = 150
    if len(temp_filename) > max_len:
         name_part, ext_part = os.path.splitext(temp_filename)
         ext_len = len(ext_part)
         name_part = name_part[:max_len - ext_len - 1]
         temp_filename = name_part + ext_part
    doc_filepath = settings.TEMP_DIR / temp_filename

    try:
        await bot.download(doc, destination=str(doc_filepath))
        logger.debug(f"Document '{filename}' saved to {doc_filepath}")
    except Exception as e:
        logger.error(f"Failed to download document '{filename}' from {user_id}: {e}")
        await bot.edit_message_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{escape_markdown_v2(filename)}'.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await cleanup_temp_file(doc_filepath)
        return

    try:
        await bot.edit_message_text(f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ '{escape_markdown_v2(filename)}'...", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
    except TelegramBadRequest: pass

    process_result = await file_handler.process_file(doc_filepath, filename, mime_type, file_size) # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤–Ω—É—Ç—Ä–∏

    if process_result:
        status_message, analysis_result = process_result
        logger.info(f"File processing result for '{filename}': Status='{status_message}', Analysis received={analysis_result is not None}")

        response_parts = [
            f"**–§–∞–π–ª:** `{escape_markdown_v2(filename)}`",
            f"**–°—Ç–∞—Ç—É—Å:** {escape_markdown_v2(status_message)}"
        ]
        user_history_message = f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {filename}]"
        model_history_message = f"[–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {status_message}]"

        if analysis_result:
            response_parts.append(f"**–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ \(Gemini\):**\n{escape_markdown_v2(analysis_result)}")
            model_history_message += f" [–ê–Ω–∞–ª–∏–∑ Gemini: {analysis_result[:150]}...]"
        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø. —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è, —Ç.–∫. —Å—Ç–∞—Ç—É—Å —É–∂–µ —ç—Ç–æ –æ—Ç—Ä–∞–∂–∞–µ—Ç
        # (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –æ—Ç AI.")

        final_response = "\n\n".join(response_parts).strip()
        await database.add_message(user_id, 'user', user_history_message)
        await database.add_message(user_id, 'model', model_history_message)

        await send_response(bot, message.chat.id, user_id, final_response, parse_mode="MarkdownV2")

        try:
            await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
        except TelegramBadRequest as del_e: logger.warning(f"Could not delete processing message after file reply: {del_e}")
        except Exception as del_e: logger.error(f"Unexpected error deleting processing message: {del_e}")

    else:
        logger.error(f"File processing failed unexpectedly for '{filename}' user {user_id} (process_file returned None)")
        fail_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ '{escape_markdown_v2(filename)}'."
        await bot.edit_message_text(fail_msg, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)
        await database.add_message(user_id, 'user', f"[–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {filename}]")
        await database.add_message(user_id, 'model', "[–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞]")

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¢–µ–∫—Å—Ç–æ–≤—ã—Ö –°–æ–æ–±—â–µ–Ω–∏–π ---
# <<< –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "–ø–æ–≥–æ–¥–∞ <–≥–æ—Ä–æ–¥>" >>>
@router.message(F.text)
async def handle_text_message(message: Message, bot: Bot):
    """
    Handles regular text messages.
    Checks if the message is a weather request (starts with '–ø–æ–≥–æ–¥–∞ ').
    If not, processes it using Gemini.
    """
    user_id = get_user_id(message=message)
    if not user_id: return
    user_text = message.text
    if not user_text or user_text.isspace():
        logger.debug(f"Ignoring empty/whitespace message from user {user_id}")
        return

    lower_text = user_text.lower()
    weather_keyword = "–ø–æ–≥–æ–¥–∞ "

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã ---
    if lower_text.startswith(weather_keyword):
        city_input = user_text[len(weather_keyword):].strip()
        if not city_input:
            city_input = "Moscow" # –ì–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            logger.info(f"User {user_id} requested weather via text, defaulting to Moscow")
        else:
            logger.info(f"User {user_id} requested weather for '{city_input}' via text")

        processing_msg = await message.reply(f"–£–∑–Ω–∞—é –ø–æ–≥–æ–¥—É –¥–ª—è '{escape_markdown_v2(city_input)}'...", parse_mode=None)
        weather_report = await weather.get_weather(city_input)

        if weather_report:
            final_parse_mode: Optional[str] = "MarkdownV2"
            error_keywords = ["–Ω–µ –Ω–∞–π–¥–µ–Ω", "–æ—à–∏–±–∫–∞", "—Å–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "—Ç–∞–π–º–∞—É—Ç", "invalid", "not found"]
            if any(keyword.lower() in weather_report.lower() for keyword in error_keywords):
                final_parse_mode = None

            try:
                await bot.edit_message_text(weather_report,
                                            chat_id=processing_msg.chat.id,
                                            message_id=processing_msg.message_id,
                                            parse_mode=final_parse_mode,
                                            disable_web_page_preview=True)
            except TelegramBadRequest as e:
                 if "message is not modified" in str(e): logger.debug(f"Weather report for {city_input} was not modified.")
                 else:
                     logger.error(f"Error editing weather message (parse_mode={final_parse_mode}): {e}. Report: '{weather_report[:200]}...'")
                     try:
                         await bot.edit_message_text(weather_report, chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None, disable_web_page_preview=True)
                     except Exception as fallback_edit_err:
                          logger.error(f"Failed to edit weather message even without parse_mode: {fallback_edit_err}")
                          await message.reply(weather_report, parse_mode=None, disable_web_page_preview=True)
                          try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                          except Exception: pass
            except Exception as e:
                 logger.error(f"Unexpected error sending weather message: {e}")
                 await message.reply(weather_report, parse_mode=final_parse_mode, disable_web_page_preview=True)
                 try: await bot.delete_message(chat_id=processing_msg.chat.id, message_id=processing_msg.message_id)
                 except Exception: pass
        else:
            await bot.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.", chat_id=processing_msg.chat.id, message_id=processing_msg.message_id, parse_mode=None)

        return # <-- –í–ê–ñ–ù–û: –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–¥–µ—Å—å

    # --- –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ Gemini ---
    else:
        logger.info(f"Received non-weather text message from user {user_id}: '{user_text[:100]}...'")
        await bot.send_chat_action(chat_id=message.chat.id, action="typing")
        await database.add_message(user_id, 'user', user_text)
        response_text = await gemini.generate_text_response(user_id, user_text)

        if response_text:
            await database.add_message(user_id, 'model', response_text)
            await send_response(bot, message.chat.id, user_id, response_text)
        else:
            logger.error(f"Failed to generate Gemini response for user {user_id}")
            error_response = "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.reply(error_response, parse_mode=None)
            await database.add_message(user_id, 'model', "[–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ AI]")


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ ---
async def send_response(bot: Bot, chat_id: int, user_id: int, text: str, parse_mode: Optional[str] = None):
    """Sends response as text or voice based on user settings, handling long messages and errors."""
    text_to_send = text
    speak_enabled = False

    try:
        speak_enabled = await database.get_speak_enabled(user_id)

        if speak_enabled:
            logger.info(f"Sending voice response to user {user_id}")
            await tts.speak_and_cleanup(bot, chat_id, text)
        else:
            logger.info(f"Sending text response to user {user_id} with parse_mode={parse_mode}")
            max_len = 4096
            if len(text_to_send) <= max_len:
                 await bot.send_message(chat_id, text_to_send, parse_mode=parse_mode, disable_web_page_preview=True)
            else:
                 logger.warning(f"Response for user {user_id} is too long ({len(text_to_send)} chars). Sending in parts.")
                 parts = []
                 current_part = ""
                 lines = text_to_send.split('\n')
                 for i, line in enumerate(lines):
                     if len(current_part) + len(line) + 1 <= max_len:
                         current_part += line + "\n"
                     else:
                         if current_part:
                             parts.append(current_part.strip())
                         if len(line) > max_len:
                             for j in range(0, len(line), max_len):
                                 chunk = line[j:j+max_len]
                                 if chunk: parts.append(chunk)
                             current_part = ""
                         else:
                             current_part = line + "\n"
                 if current_part.strip():
                     parts.append(current_part.strip())

                 for i, part in enumerate(parts):
                     if not part: continue
                     logger.debug(f"Sending part {i+1}/{len(parts)} ({len(part)} chars) to chat {chat_id}")
                     await bot.send_message(chat_id, part, parse_mode=parse_mode, disable_web_page_preview=True)
                     if i < len(parts) - 1:
                         await asyncio.sleep(0.8)

    except TelegramBadRequest as e:
         logger.error(f"Telegram API error sending response to user {user_id} (chat {chat_id}) with parse_mode={parse_mode}: {e}")
         if parse_mode:
             logger.warning(f"Retrying to send message to {user_id} without parse_mode.")
             try:
                 await send_response(bot, chat_id, user_id, text, parse_mode=None)
                 logger.info("Successfully sent response without formatting as fallback.")
             except Exception as fallback_e:
                  logger.error(f"Failed to send fallback unformatted message to chat {chat_id}: {fallback_e}")
         else:
             logger.error(f"Failed to send message/voice to chat {chat_id}. Error: {e}")
             if not speak_enabled:
                try: await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.", parse_mode=None)
                except Exception: pass

    except Exception as e:
        logger.error(f"General error sending response to user {user_id} (chat {chat_id}): {e}")
        logger.exception(e)
        if not speak_enabled:
            try: await bot.send_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.", parse_mode=None)
            except Exception: pass

# --- END OF FILE bot/handlers.py ---