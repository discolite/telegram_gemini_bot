import aiohttp
import asyncio # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç asyncio
from loguru import logger
from typing import Optional, Dict
from config import settings

API_KEY = settings.OPENWEATHERMAP_API_KEY
BASE_URL = "http://api.openweathermap.org/data/2.5/weather"

async def get_weather(city: str = "Moscow") -> Optional[str]:
    """Fetches weather data from OpenWeatherMap and formats it."""
    if not API_KEY:
        logger.warning("OpenWeatherMap API key is missing. Cannot fetch weather.")
        return "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)"

    params = {
        'q': city,
        'appid': API_KEY,
        'units': 'metric', # –ì—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
        'lang': 'ru'       # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    }

    # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, 15 —Å–µ–∫—É–Ω–¥ --->
    request_timeout = 15
    timeout = aiohttp.ClientTimeout(total=request_timeout)
    logger.debug(f"Requesting weather for {city} with timeout {request_timeout}s")

    try:
        # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º timeout –≤ ClientSession --->
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(BASE_URL, params=params) as response:
                response_text = await response.text() # –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –æ–¥–∏–Ω —Ä–∞–∑
                logger.debug(f"OpenWeatherMap response status for {city}: {response.status}")
                if response.status == 200:
                    try:
                        data = await response.json(content_type=None) # –ò–Ω–æ–≥–¥–∞ content-type –±—ã–≤–∞–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–º
                        logger.info(f"Successfully fetched weather for {city}")
                        return await _format_weather_data(data, city)
                    except Exception as json_err:
                        logger.error(f"Failed to parse JSON response from OpenWeatherMap for {city}: {json_err}. Response text: {response_text[:200]}...")
                        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}'"
                elif response.status == 404:
                    logger.warning(f"City not found on OpenWeatherMap: {city}")
                    return f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"
                elif response.status == 401:
                    logger.error(f"Invalid OpenWeatherMap API key. Response: {response_text[:200]}...")
                    return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á"
                elif response.status == 429:
                    logger.warning(f"Rate limit exceeded for OpenWeatherMap API. Response: {response_text[:200]}...")
                    return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                else:
                    logger.error(f"Error fetching weather for {city}. Status: {response.status}, Response: {response_text[:200]}...")
                    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city}'. –°—Ç–∞—Ç—É—Å: {response.status}"
    # <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Ç–∞–π–º–∞—É—Ç–∞ --->
    except asyncio.TimeoutError:
         logger.error(f"Timeout error ({request_timeout}s) fetching weather for {city}")
         return f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}' –∏—Å—Ç–µ–∫–ª–æ ({request_timeout} —Å–µ–∫)"
    except aiohttp.ClientConnectorError as e:
        logger.error(f"Network connection error fetching weather for {city}: {e}")
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}'"
    except aiohttp.ClientError as e: # –õ–æ–≤–∏–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ aiohttp
        logger.error(f"AIOHTTP client error fetching weather for {city}: {e}")
        return f"–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}'"
    except Exception as e:
        logger.error(f"Unexpected error fetching weather for {city}: {e}")
        logger.exception(e)
        return f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}'"

async def _format_weather_data(data: Dict, city_name: str) -> str:
    """Formats the raw weather data into a user-friendly string."""
    try:
        main = data.get('main', {})
        weather_list = data.get('weather', [])
        weather_desc = weather_list[0].get('description', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö') if weather_list else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        wind = data.get('wind', {})

        temp = main.get('temp', 'N/A')
        feels_like = main.get('feels_like', 'N/A')
        humidity = main.get('humidity', 'N/A')
        wind_speed = wind.get('speed', 'N/A')

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º f-string —Å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è MarkdownV2
        weather_report = (
            f"‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data.get('name', city_name).replace('.', r'.')}**:\n" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C \(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C\)\n"
            f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_desc.capitalize().replace('.', r'.')}\n" # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤ –æ–ø–∏—Å–∞–Ω–∏–∏
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        )
        logger.debug(f"Formatted weather report for {city_name}: {weather_report}")
        return weather_report

    except Exception as e:
        logger.error(f"Error formatting weather data for {city_name}: {e}")
        logger.exception(e)
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city_name}"