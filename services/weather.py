import aiohttp
from loguru import logger
from typing import Optional, Dict
from config import settings
# from services.gemini import generate_text_response # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è Gemini-–æ–ø–∏—Å–∞–Ω–∏—è

API_KEY = settings.OPENWEATHERMAP_API_KEY
BASE_URL = "http://api.openweathermap.org/data/2.5/weather"

async def get_weather(city: str = "Moscow") -> Optional[str]:
    """Fetches weather data from OpenWeatherMap and formats it."""
    if not API_KEY:
        logger.warning("OpenWeatherMap API key is missing. Cannot fetch weather.")
        return "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)."

    params = {
        'q': city,
        'appid': API_KEY,
        'units': 'metric', # –ì—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
        'lang': 'ru'       # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(BASE_URL, params=params) as response:
                if response.status == 200:
                    data = await response.json()
                    logger.info(f"Successfully fetched weather for {city}")
                    return await _format_weather_data(data, city)
                elif response.status == 404:
                    logger.warning(f"City not found on OpenWeatherMap: {city}")
                    return f"–ì–æ—Ä–æ–¥ '{city}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥."
                elif response.status == 401:
                    logger.error("Invalid OpenWeatherMap API key.")
                    return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–≥–æ–¥—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á."
                else:
                    logger.error(f"Error fetching weather for {city}. Status: {response.status}, Response: {await response.text()}")
                    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{city}'. –°—Ç–∞—Ç—É—Å: {response.status}"
    except aiohttp.ClientError as e:
        logger.error(f"Network error fetching weather for {city}: {e}")
        return f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}'."
    except Exception as e:
        logger.error(f"Unexpected error fetching weather for {city}: {e}")
        logger.exception(e)
        return f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{city}'."

async def _format_weather_data(data: Dict, city_name: str) -> str:
    """Formats the raw weather data into a user-friendly string."""
    try:
        main = data.get('main', {})
        weather_desc = data.get('weather', [{}])[0].get('description', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
        wind = data.get('wind', {})

        temp = main.get('temp', 'N/A')
        feels_like = main.get('feels_like', 'N/A')
        humidity = main.get('humidity', 'N/A')
        wind_speed = wind.get('speed', 'N/A')

        # –ë–∞–∑–æ–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        weather_report = (
            f"‚òÄÔ∏è **–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {data.get('name', city_name)}:**\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_desc.capitalize()}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        )

        # --- –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gemini –¥–ª—è "–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ" –æ–ø–∏—Å–∞–Ω–∏—è ---
        # try:
        #     # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        #     gemini_prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –≤ {data.get('name', city_name)}: —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C, –æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C, —Å–æ—Å—Ç–æ—è–Ω–∏–µ '{weather_desc}', –≤–ª–∞–∂–Ω–æ—Å—Ç—å {humidity}%, –≤–µ—Ç–µ—Ä {wind_speed} –º/—Å. –î–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å–æ–≤–µ—Ç –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–í–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç!', '–û—Ç–ª–∏—á–Ω—ã–π –¥–µ–Ω—å –¥–ª—è –ø—Ä–æ–≥—É–ª–∫–∏!'). –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π —Ü–∏—Ñ—Ä—ã, –ø—Ä–æ—Å—Ç–æ –¥–∞–π —Å–æ–≤–µ—Ç."
        #
        #     # –í–∞–∂–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID,
        #     # —á—Ç–æ–±—ã –Ω–µ —Å–º–µ—à–∏–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–≥–æ–¥—ã —Å –æ–±—ã—á–Ω—ã–º —á–∞—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        #     # –ò–ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ user_id=None (–µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è gemini —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç)
        #     # –∏–ª–∏ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ gemini.py –±–µ–∑ user_id.
        #     # –ó–¥–µ—Å—å –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ generate_text_response –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ user_id
        #     # –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ID = 0 –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
        #     # –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ—Ä–∞–±–æ—Ç–∫–∏ generate_text_response
        #
        #     # –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ generate_text_response):
        #     # natural_comment = await generate_text_response(user_id=0, user_prompt=gemini_prompt)
        #     natural_comment = None # –ó–∞–≥–ª—É—à–∫–∞
        #
        #     if natural_comment and "–æ—à–∏–±–∫–∞" not in natural_comment.lower():
        #         weather_report += f"\n\nüí° {natural_comment}"
        #     else:
        #         logger.warning(f"Could not get natural weather comment from Gemini for {city_name}.")
        #
        # except Exception as e:
        #     logger.error(f"Error getting natural weather comment from Gemini: {e}")
        # --- –ö–æ–Ω–µ—Ü –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ ---

        return weather_report

    except Exception as e:
        logger.error(f"Error formatting weather data for {city_name}: {e}")
        logger.exception(e)
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city_name}."