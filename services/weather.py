# /home/telegram_gemini_bot/services/weather.py

import aiohttp
import asyncio
from loguru import logger
from typing import Optional, Dict

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —Ö–µ–ª–ø–µ—Ä —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
from config import settings
from utils.helpers import escape_markdown_v2 # <--- –ò–ú–ü–û–†–¢ –•–ï–õ–ü–ï–†–ê

API_KEY = settings.OPENWEATHERMAP_API_KEY
BASE_URL = "http://api.openweathermap.org/data/2.5/weather"

async def get_weather(city: str = "Moscow") -> Optional[str]:
    """Fetches weather data from OpenWeatherMap and formats it for MarkdownV2."""
    if not API_KEY:
        logger.warning("OpenWeatherMap API key is missing. Cannot fetch weather.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –ë–ï–ó Markdown, —Ç.–∫. —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        return "–°–µ—Ä–≤–∏—Å –ø–æ–≥–æ–¥—ã –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç API –∫–ª—é—á)"

    params = {
        'q': city,
        'appid': API_KEY,
        'units': 'metric', # –ì—Ä–∞–¥—É—Å—ã –¶–µ–ª—å—Å–∏—è
        'lang': 'ru'       # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
    }

    request_timeout = 15
    timeout = aiohttp.ClientTimeout(total=request_timeout)
    logger.debug(f"Requesting weather for {city} with timeout {request_timeout}s")

    try:
        async with aiohttp.ClientSession(timeout=timeout) as session:
            async with session.get(BASE_URL, params=params) as response:
                response_text = await response.text()
                logger.debug(f"OpenWeatherMap response status for {city}: {response.status}")
                if response.status == 200:
                    try:
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º response.json(), —Ç.–∫. text() —É–∂–µ –ø—Ä–æ—á–∏—Ç–∞–ª —Ç–µ–ª–æ
                        data = await response.json(content_type=None)
                        logger.info(f"Successfully fetched weather for {city}")
                        # <--- –í–´–ó–´–í–ê–ï–ú –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –§–û–†–ú–ê–¢–¢–ï–† ---
                        return await _format_weather_data_markdownv2(data, city)
                    except Exception as json_err:
                        logger.error(f"Failed to parse JSON response from OpenWeatherMap for {city}: {json_err}. Response text: {response_text[:200]}...")
                        # –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö –ë–ï–ó Markdown
                        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è '{escape_markdown_v2(city)}'"
                elif response.status == 404:
                    logger.warning(f"City not found on OpenWeatherMap: {city}")
                    return f"–ì–æ—Ä–æ–¥ '{escape_markdown_v2(city)}' –Ω–µ –Ω–∞–π–¥–µ–Ω\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥"
                elif response.status == 401:
                    logger.error(f"Invalid OpenWeatherMap API key. Response: {response_text[:200]}...")
                    return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–∏—Å–µ –ø–æ–≥–æ–¥—ã\\. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á"
                elif response.status == 429:
                    logger.warning(f"Rate limit exceeded for OpenWeatherMap API. Response: {response_text[:200]}...")
                    return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–≥–æ–¥—ã\\. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ"
                else:
                    logger.error(f"Error fetching weather for {city}. Status: {response.status}, Response: {response_text[:200]}...")
                    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É –¥–ª—è '{escape_markdown_v2(city)}'\\. –°—Ç–∞—Ç—É—Å: {response.status}"
    except asyncio.TimeoutError:
         logger.error(f"Timeout error ({request_timeout}s) fetching weather for {city}")
         return f"–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è '{escape_markdown_v2(city)}' –∏—Å—Ç–µ–∫–ª–æ \\({request_timeout} —Å–µ–∫\\)"
    except aiohttp.ClientConnectorError as e:
        logger.error(f"Network connection error fetching weather for {city}: {e}")
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{escape_markdown_v2(city)}'"
    except aiohttp.ClientError as e:
        logger.error(f"AIOHTTP client error fetching weather for {city}: {e}")
        return f"–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{escape_markdown_v2(city)}'"
    except Exception as e:
        logger.error(f"Unexpected error fetching weather for {city}: {e}")
        logger.exception(e)
        return f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã –¥–ª—è '{escape_markdown_v2(city)}'"

# <--- –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ê –ò –ò–ó–ú–ï–ù–ï–ù–ê –§–£–ù–ö–¶–ò–Ø –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–Ø ---
async def _format_weather_data_markdownv2(data: Dict, city_name: str) -> str:
    """Formats the raw weather data into a MarkdownV2 string."""
    try:
        main = data.get('main', {})
        weather_list = data.get('weather', [])
        weather_desc_raw = weather_list[0].get('description', '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö') if weather_list else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        wind = data.get('wind', {})

        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–ª–∏ 'N/A', –µ—Å–ª–∏ –∫–ª—é—á–∞ –Ω–µ—Ç
        temp_raw = main.get('temp')
        feels_like_raw = main.get('feels_like')
        humidity_raw = main.get('humidity')
        wind_speed_raw = wind.get('speed')

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å—Ç—Ä–æ–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–ª—è MarkdownV2
        city_display_name = escape_markdown_v2(data.get('name', city_name))
        temp = escape_markdown_v2(f"{temp_raw:.2f}") if isinstance(temp_raw, (int, float)) else 'N/A'
        feels_like = escape_markdown_v2(f"{feels_like_raw:.2f}") if isinstance(feels_like_raw, (int, float)) else 'N/A'
        humidity = escape_markdown_v2(str(humidity_raw)) if humidity_raw is not None else 'N/A'
        wind_speed = escape_markdown_v2(str(wind_speed_raw)) if wind_speed_raw is not None else 'N/A'
        weather_desc = escape_markdown_v2(weather_desc_raw.capitalize())

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å MarkdownV2 —Ä–∞–∑–º–µ—Ç–∫–æ–π –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¢–û–õ–¨–ö–û —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–æ—á–∫–∏
        weather_report = (
            f"‚òÄÔ∏è *–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_display_name}*:\n\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{temp}`¬∞C \\(–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ `{feels_like}`¬∞C\\)\n"
            f"üìù –°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather_desc}\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: `{humidity}`%\n"
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤ "–º/—Å"
            f"üí® –í–µ—Ç–µ—Ä: `{wind_speed}` –º\\/—Å"
        )
        logger.debug(f"Formatted MarkdownV2 weather report for {city_name}: {weather_report}")
        return weather_report

    except Exception as e:
        logger.error(f"Error formatting weather data for {city_name}: {e}")
        logger.exception(e)
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ë–ï–ó Markdown
        return f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {escape_markdown_v2(city_name)}"